
USB Throttle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a38  08006a38  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08006a38  08006a38  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a38  08006a38  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  20000164  08006ba4  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08006ba4  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e36  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d39  00000000  00000000  00031fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  00034d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  000358d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171fe  00000000  00000000  00036348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d04d  00000000  00000000  0004d546  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072b59  00000000  00000000  0005a593  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd0ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f48  00000000  00000000  000cd168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000164 	.word	0x20000164
 800012c:	00000000 	.word	0x00000000
 8000130:	080069a0 	.word	0x080069a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000168 	.word	0x20000168
 800014c:	080069a0 	.word	0x080069a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 fcdf 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f005 faac 	bl	8005ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fcf7 	bl	800136a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 fcbf 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000dc 	.word	0x200000dc
 80009b0:	20000004 	.word	0x20000004
 80009b4:	20000000 	.word	0x20000000

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <HAL_IncTick+0x20>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	20000004 	.word	0x20000004
 80009d8:	200001a0 	.word	0x200001a0

080009dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	200001a0 	.word	0x200001a0

080009f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0be      	b.n	8000b90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f005 fa6a 	bl	8005f08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 faf7 	bl	8001028 <ADC_ConversionStop_Disable>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8099 	bne.w	8000b7e <HAL_ADC_Init+0x18e>
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8095 	bne.w	8000b7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a5c:	f023 0302 	bic.w	r3, r3, #2
 8000a60:	f043 0202 	orr.w	r2, r3, #2
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7b1b      	ldrb	r3, [r3, #12]
 8000a76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a88:	d003      	beq.n	8000a92 <HAL_ADC_Init+0xa2>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d102      	bne.n	8000a98 <HAL_ADC_Init+0xa8>
 8000a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a96:	e000      	b.n	8000a9a <HAL_ADC_Init+0xaa>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7d1b      	ldrb	r3, [r3, #20]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d119      	bne.n	8000adc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b1b      	ldrb	r3, [r3, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	035a      	lsls	r2, r3, #13
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	e00b      	b.n	8000adc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	f043 0220 	orr.w	r2, r3, #32
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	f043 0201 	orr.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <HAL_ADC_Init+0x1a8>)
 8000af8:	4013      	ands	r3, r2
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	430b      	orrs	r3, r1
 8000b02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b0c:	d003      	beq.n	8000b16 <HAL_ADC_Init+0x126>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d104      	bne.n	8000b20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	051b      	lsls	r3, r3, #20
 8000b1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_ADC_Init+0x1ac>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d10b      	bne.n	8000b5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4e:	f023 0303 	bic.w	r3, r3, #3
 8000b52:	f043 0201 	orr.w	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b5a:	e018      	b.n	8000b8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f023 0312 	bic.w	r3, r3, #18
 8000b64:	f043 0210 	orr.w	r2, r3, #16
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b7c:	e007      	b.n	8000b8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	f043 0210 	orr.w	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	ffe1f7fd 	.word	0xffe1f7fd
 8000b9c:	ff1f0efe 	.word	0xff1f0efe

08000ba0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a64      	ldr	r2, [pc, #400]	; (8000d48 <HAL_ADC_Start_DMA+0x1a8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d004      	beq.n	8000bc4 <HAL_ADC_Start_DMA+0x24>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a63      	ldr	r2, [pc, #396]	; (8000d4c <HAL_ADC_Start_DMA+0x1ac>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d106      	bne.n	8000bd2 <HAL_ADC_Start_DMA+0x32>
 8000bc4:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <HAL_ADC_Start_DMA+0x1a8>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f040 80b3 	bne.w	8000d38 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d101      	bne.n	8000be0 <HAL_ADC_Start_DMA+0x40>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e0ae      	b.n	8000d3e <HAL_ADC_Start_DMA+0x19e>
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 f9cb 	bl	8000f84 <ADC_Enable>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 809a 	bne.w	8000d2e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	; (8000d4c <HAL_ADC_Start_DMA+0x1ac>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d105      	bne.n	8000c24 <HAL_ADC_Start_DMA+0x84>
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <HAL_ADC_Start_DMA+0x1a8>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d115      	bne.n	8000c50 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d026      	beq.n	8000c8c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c4e:	e01d      	b.n	8000c8c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a39      	ldr	r2, [pc, #228]	; (8000d48 <HAL_ADC_Start_DMA+0x1a8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d004      	beq.n	8000c70 <HAL_ADC_Start_DMA+0xd0>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a38      	ldr	r2, [pc, #224]	; (8000d4c <HAL_ADC_Start_DMA+0x1ac>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d10d      	bne.n	8000c8c <HAL_ADC_Start_DMA+0xec>
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <HAL_ADC_Start_DMA+0x1a8>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d007      	beq.n	8000c8c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	f023 0206 	bic.w	r2, r3, #6
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca4:	e002      	b.n	8000cac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6a1b      	ldr	r3, [r3, #32]
 8000cb8:	4a25      	ldr	r2, [pc, #148]	; (8000d50 <HAL_ADC_Start_DMA+0x1b0>)
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <HAL_ADC_Start_DMA+0x1b4>)
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <HAL_ADC_Start_DMA+0x1b8>)
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f06f 0202 	mvn.w	r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ce4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a18      	ldr	r0, [r3, #32]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	334c      	adds	r3, #76	; 0x4c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f000 fb9f 	bl	8001438 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d08:	d108      	bne.n	8000d1c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d18:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d1a:	e00f      	b.n	8000d3c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d2a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d2c:	e006      	b.n	8000d3c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000d36:	e001      	b.n	8000d3c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012400 	.word	0x40012400
 8000d4c:	40012800 	.word	0x40012800
 8000d50:	0800109d 	.word	0x0800109d
 8000d54:	08001119 	.word	0x08001119
 8000d58:	08001135 	.word	0x08001135

08000d5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_ADC_ConfigChannel+0x20>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e0dc      	b.n	8000f6e <HAL_ADC_ConfigChannel+0x1da>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d81c      	bhi.n	8000dfe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3b05      	subs	r3, #5
 8000dd6:	221f      	movs	r2, #31
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4019      	ands	r1, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	3b05      	subs	r3, #5
 8000df0:	fa00 f203 	lsl.w	r2, r0, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
 8000dfc:	e03c      	b.n	8000e78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b0c      	cmp	r3, #12
 8000e04:	d81c      	bhi.n	8000e40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	3b23      	subs	r3, #35	; 0x23
 8000e18:	221f      	movs	r2, #31
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4019      	ands	r1, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	3b23      	subs	r3, #35	; 0x23
 8000e32:	fa00 f203 	lsl.w	r2, r0, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3e:	e01b      	b.n	8000e78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	3b41      	subs	r3, #65	; 0x41
 8000e52:	221f      	movs	r2, #31
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b41      	subs	r3, #65	; 0x41
 8000e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b09      	cmp	r3, #9
 8000e7e:	d91c      	bls.n	8000eba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68d9      	ldr	r1, [r3, #12]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	3b1e      	subs	r3, #30
 8000e92:	2207      	movs	r2, #7
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4019      	ands	r1, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	6898      	ldr	r0, [r3, #8]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3b1e      	subs	r3, #30
 8000eac:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	e019      	b.n	8000eee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6919      	ldr	r1, [r3, #16]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	2207      	movs	r2, #7
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4019      	ands	r1, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	6898      	ldr	r0, [r3, #8]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b10      	cmp	r3, #16
 8000ef4:	d003      	beq.n	8000efe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000efa:	2b11      	cmp	r3, #17
 8000efc:	d132      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d125      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d126      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f24:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b10      	cmp	r3, #16
 8000f2c:	d11a      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_ADC_ConfigChannel+0x1e8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	0c9a      	lsrs	r2, r3, #18
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f44:	e002      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f9      	bne.n	8000f46 <HAL_ADC_ConfigChannel+0x1b2>
 8000f52:	e007      	b.n	8000f64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f043 0220 	orr.w	r2, r3, #32
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40012400 	.word	0x40012400
 8000f7c:	200000dc 	.word	0x200000dc
 8000f80:	431bde83 	.word	0x431bde83

08000f84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d039      	beq.n	8001016 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <ADC_Enable+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <ADC_Enable+0xa0>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	0c9b      	lsrs	r3, r3, #18
 8000fbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fc0:	e002      	b.n	8000fc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f9      	bne.n	8000fc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fce:	f7ff fd05 	bl	80009dc <HAL_GetTick>
 8000fd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fd4:	e018      	b.n	8001008 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fd6:	f7ff fd01 	bl	80009dc <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d911      	bls.n	8001008 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	f043 0210 	orr.w	r2, r3, #16
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	f043 0201 	orr.w	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e007      	b.n	8001018 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d1df      	bne.n	8000fd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000dc 	.word	0x200000dc
 8001024:	431bde83 	.word	0x431bde83

08001028 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b01      	cmp	r3, #1
 8001040:	d127      	bne.n	8001092 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001052:	f7ff fcc3 	bl	80009dc <HAL_GetTick>
 8001056:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001058:	e014      	b.n	8001084 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800105a:	f7ff fcbf 	bl	80009dc <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d90d      	bls.n	8001084 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f043 0210 	orr.w	r2, r3, #16
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	f043 0201 	orr.w	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e007      	b.n	8001094 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b01      	cmp	r3, #1
 8001090:	d0e3      	beq.n	800105a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d127      	bne.n	8001106 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010d0:	d115      	bne.n	80010fe <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d111      	bne.n	80010fe <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff fe2c 	bl	8000d5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001104:	e004      	b.n	8001110 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff fe21 	bl	8000d6e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	f043 0204 	orr.w	r2, r3, #4
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f7ff fe10 	bl	8000d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4906      	ldr	r1, [pc, #24]	; (8001200 <__NVIC_EnableIRQ+0x34>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff90 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff2d 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff42 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff35 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e043      	b.n	8001422 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <HAL_DMA_Init+0xa8>)
 80013a2:	4413      	add	r3, r2
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_DMA_Init+0xac>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	009a      	lsls	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <HAL_DMA_Init+0xb0>)
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	bffdfff8 	.word	0xbffdfff8
 8001430:	cccccccd 	.word	0xcccccccd
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_DMA_Start_IT+0x20>
 8001454:	2302      	movs	r3, #2
 8001456:	e04a      	b.n	80014ee <HAL_DMA_Start_IT+0xb6>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001466:	2b01      	cmp	r3, #1
 8001468:	d13a      	bne.n	80014e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2202      	movs	r2, #2
 800146e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f938 	bl	8001704 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 020e 	orr.w	r2, r2, #14
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e00f      	b.n	80014ce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0204 	bic.w	r2, r2, #4
 80014bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 020a 	orr.w	r2, r2, #10
 80014cc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0201 	orr.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e005      	b.n	80014ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014e8:	2302      	movs	r3, #2
 80014ea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2204      	movs	r2, #4
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d04f      	beq.n	80015c0 <HAL_DMA_IRQHandler+0xc8>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d04a      	beq.n	80015c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d107      	bne.n	8001548 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a66      	ldr	r2, [pc, #408]	; (80016e8 <HAL_DMA_IRQHandler+0x1f0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d029      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xae>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a65      	ldr	r2, [pc, #404]	; (80016ec <HAL_DMA_IRQHandler+0x1f4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d022      	beq.n	80015a2 <HAL_DMA_IRQHandler+0xaa>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <HAL_DMA_IRQHandler+0x1f8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01a      	beq.n	800159c <HAL_DMA_IRQHandler+0xa4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a62      	ldr	r2, [pc, #392]	; (80016f4 <HAL_DMA_IRQHandler+0x1fc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d012      	beq.n	8001596 <HAL_DMA_IRQHandler+0x9e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a60      	ldr	r2, [pc, #384]	; (80016f8 <HAL_DMA_IRQHandler+0x200>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00a      	beq.n	8001590 <HAL_DMA_IRQHandler+0x98>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_DMA_IRQHandler+0x204>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d102      	bne.n	800158a <HAL_DMA_IRQHandler+0x92>
 8001584:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001588:	e00e      	b.n	80015a8 <HAL_DMA_IRQHandler+0xb0>
 800158a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800158e:	e00b      	b.n	80015a8 <HAL_DMA_IRQHandler+0xb0>
 8001590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001594:	e008      	b.n	80015a8 <HAL_DMA_IRQHandler+0xb0>
 8001596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159a:	e005      	b.n	80015a8 <HAL_DMA_IRQHandler+0xb0>
 800159c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a0:	e002      	b.n	80015a8 <HAL_DMA_IRQHandler+0xb0>
 80015a2:	2340      	movs	r3, #64	; 0x40
 80015a4:	e000      	b.n	80015a8 <HAL_DMA_IRQHandler+0xb0>
 80015a6:	2304      	movs	r3, #4
 80015a8:	4a55      	ldr	r2, [pc, #340]	; (8001700 <HAL_DMA_IRQHandler+0x208>)
 80015aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8094 	beq.w	80016de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015be:	e08e      	b.n	80016de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2202      	movs	r2, #2
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d056      	beq.n	800167e <HAL_DMA_IRQHandler+0x186>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d051      	beq.n	800167e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10b      	bne.n	8001600 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 020a 	bic.w	r2, r2, #10
 80015f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <HAL_DMA_IRQHandler+0x1f0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d029      	beq.n	800165e <HAL_DMA_IRQHandler+0x166>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a37      	ldr	r2, [pc, #220]	; (80016ec <HAL_DMA_IRQHandler+0x1f4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <HAL_DMA_IRQHandler+0x162>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <HAL_DMA_IRQHandler+0x1f8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01a      	beq.n	8001654 <HAL_DMA_IRQHandler+0x15c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a34      	ldr	r2, [pc, #208]	; (80016f4 <HAL_DMA_IRQHandler+0x1fc>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d012      	beq.n	800164e <HAL_DMA_IRQHandler+0x156>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_DMA_IRQHandler+0x200>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00a      	beq.n	8001648 <HAL_DMA_IRQHandler+0x150>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a31      	ldr	r2, [pc, #196]	; (80016fc <HAL_DMA_IRQHandler+0x204>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d102      	bne.n	8001642 <HAL_DMA_IRQHandler+0x14a>
 800163c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001640:	e00e      	b.n	8001660 <HAL_DMA_IRQHandler+0x168>
 8001642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001646:	e00b      	b.n	8001660 <HAL_DMA_IRQHandler+0x168>
 8001648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164c:	e008      	b.n	8001660 <HAL_DMA_IRQHandler+0x168>
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	e005      	b.n	8001660 <HAL_DMA_IRQHandler+0x168>
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	e002      	b.n	8001660 <HAL_DMA_IRQHandler+0x168>
 800165a:	2320      	movs	r3, #32
 800165c:	e000      	b.n	8001660 <HAL_DMA_IRQHandler+0x168>
 800165e:	2302      	movs	r3, #2
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <HAL_DMA_IRQHandler+0x208>)
 8001662:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	2b00      	cmp	r3, #0
 8001672:	d034      	beq.n	80016de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800167c:	e02f      	b.n	80016de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2208      	movs	r2, #8
 8001684:	409a      	lsls	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d028      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x1e8>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d023      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 020e 	bic.w	r2, r2, #14
 80016a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f202 	lsl.w	r2, r1, r2
 80016b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
    }
  }
  return;
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
}
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020008 	.word	0x40020008
 80016ec:	4002001c 	.word	0x4002001c
 80016f0:	40020030 	.word	0x40020030
 80016f4:	40020044 	.word	0x40020044
 80016f8:	40020058 	.word	0x40020058
 80016fc:	4002006c 	.word	0x4002006c
 8001700:	40020000 	.word	0x40020000

08001704 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b10      	cmp	r3, #16
 8001730:	d108      	bne.n	8001744 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001742:	e007      	b.n	8001754 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	e127      	b.n	80019c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001774:	2201      	movs	r2, #1
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8116 	bne.w	80019be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b12      	cmp	r3, #18
 8001798:	d034      	beq.n	8001804 <HAL_GPIO_Init+0xa4>
 800179a:	2b12      	cmp	r3, #18
 800179c:	d80d      	bhi.n	80017ba <HAL_GPIO_Init+0x5a>
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d02b      	beq.n	80017fa <HAL_GPIO_Init+0x9a>
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d804      	bhi.n	80017b0 <HAL_GPIO_Init+0x50>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d031      	beq.n	800180e <HAL_GPIO_Init+0xae>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d01c      	beq.n	80017e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ae:	e048      	b.n	8001842 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d043      	beq.n	800183c <HAL_GPIO_Init+0xdc>
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d01b      	beq.n	80017f0 <HAL_GPIO_Init+0x90>
          break;
 80017b8:	e043      	b.n	8001842 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017ba:	4a89      	ldr	r2, [pc, #548]	; (80019e0 <HAL_GPIO_Init+0x280>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d026      	beq.n	800180e <HAL_GPIO_Init+0xae>
 80017c0:	4a87      	ldr	r2, [pc, #540]	; (80019e0 <HAL_GPIO_Init+0x280>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d806      	bhi.n	80017d4 <HAL_GPIO_Init+0x74>
 80017c6:	4a87      	ldr	r2, [pc, #540]	; (80019e4 <HAL_GPIO_Init+0x284>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d020      	beq.n	800180e <HAL_GPIO_Init+0xae>
 80017cc:	4a86      	ldr	r2, [pc, #536]	; (80019e8 <HAL_GPIO_Init+0x288>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01d      	beq.n	800180e <HAL_GPIO_Init+0xae>
          break;
 80017d2:	e036      	b.n	8001842 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017d4:	4a85      	ldr	r2, [pc, #532]	; (80019ec <HAL_GPIO_Init+0x28c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d019      	beq.n	800180e <HAL_GPIO_Init+0xae>
 80017da:	4a85      	ldr	r2, [pc, #532]	; (80019f0 <HAL_GPIO_Init+0x290>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d016      	beq.n	800180e <HAL_GPIO_Init+0xae>
 80017e0:	4a84      	ldr	r2, [pc, #528]	; (80019f4 <HAL_GPIO_Init+0x294>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0xae>
          break;
 80017e6:	e02c      	b.n	8001842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e028      	b.n	8001842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	3304      	adds	r3, #4
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e023      	b.n	8001842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	3308      	adds	r3, #8
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e01e      	b.n	8001842 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	330c      	adds	r3, #12
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e019      	b.n	8001842 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001816:	2304      	movs	r3, #4
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e012      	b.n	8001842 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001824:	2308      	movs	r3, #8
 8001826:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	611a      	str	r2, [r3, #16]
          break;
 800182e:	e008      	b.n	8001842 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001830:	2308      	movs	r3, #8
 8001832:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	615a      	str	r2, [r3, #20]
          break;
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2bff      	cmp	r3, #255	; 0xff
 8001846:	d801      	bhi.n	800184c <HAL_GPIO_Init+0xec>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	e001      	b.n	8001850 <HAL_GPIO_Init+0xf0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3304      	adds	r3, #4
 8001850:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2bff      	cmp	r3, #255	; 0xff
 8001856:	d802      	bhi.n	800185e <HAL_GPIO_Init+0xfe>
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x104>
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3b08      	subs	r3, #8
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	210f      	movs	r1, #15
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	401a      	ands	r2, r3
 8001876:	6a39      	ldr	r1, [r7, #32]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8096 	beq.w	80019be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001892:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_GPIO_Init+0x298>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <HAL_GPIO_Init+0x298>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_GPIO_Init+0x298>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018aa:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_GPIO_Init+0x29c>)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0x19e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4a      	ldr	r2, [pc, #296]	; (8001a04 <HAL_GPIO_Init+0x2a4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00d      	beq.n	80018fa <HAL_GPIO_Init+0x19a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <HAL_GPIO_Init+0x2a8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <HAL_GPIO_Init+0x196>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a48      	ldr	r2, [pc, #288]	; (8001a0c <HAL_GPIO_Init+0x2ac>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_Init+0x192>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x1a0>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x1a0>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x1a0>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x1a0>
 80018fe:	2300      	movs	r3, #0
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001910:	493a      	ldr	r1, [pc, #232]	; (80019fc <HAL_GPIO_Init+0x29c>)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4938      	ldr	r1, [pc, #224]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e006      	b.n	8001946 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	43db      	mvns	r3, r3
 8001940:	4933      	ldr	r1, [pc, #204]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001942:	4013      	ands	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	492e      	ldr	r1, [pc, #184]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
 800195e:	e006      	b.n	800196e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001960:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	43db      	mvns	r3, r3
 8001968:	4929      	ldr	r1, [pc, #164]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 800196a:	4013      	ands	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	4924      	ldr	r1, [pc, #144]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	43db      	mvns	r3, r3
 8001990:	491f      	ldr	r1, [pc, #124]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001992:	4013      	ands	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	491a      	ldr	r1, [pc, #104]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4915      	ldr	r1, [pc, #84]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	3301      	adds	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f47f aed0 	bne.w	8001774 <HAL_GPIO_Init+0x14>
  }
}
 80019d4:	bf00      	nop
 80019d6:	372c      	adds	r7, #44	; 0x2c
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	10210000 	.word	0x10210000
 80019e4:	10110000 	.word	0x10110000
 80019e8:	10120000 	.word	0x10120000
 80019ec:	10310000 	.word	0x10310000
 80019f0:	10320000 	.word	0x10320000
 80019f4:	10220000 	.word	0x10220000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	b08b      	sub	sp, #44	; 0x2c
 8001a48:	af06      	add	r7, sp, #24
 8001a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0d3      	b.n	8001bfe <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f004 fb56 	bl	800611c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fb76 	bl	800316e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	687e      	ldr	r6, [r7, #4]
 8001a8a:	466d      	mov	r5, sp
 8001a8c:	f106 0410 	add.w	r4, r6, #16
 8001a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	602b      	str	r3, [r5, #0]
 8001a98:	1d33      	adds	r3, r6, #4
 8001a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9c:	6838      	ldr	r0, [r7, #0]
 8001a9e:	f001 fb3f 	bl	8003120 <USB_CoreInit>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0a4      	b.n	8001bfe <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 fb73 	bl	80031a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e035      	b.n	8001b32 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	015b      	lsls	r3, r3, #5
 8001acc:	4413      	add	r3, r2
 8001ace:	3329      	adds	r3, #41	; 0x29
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	4413      	add	r3, r2
 8001adc:	3328      	adds	r3, #40	; 0x28
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	b291      	uxth	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	4413      	add	r3, r2
 8001aee:	3336      	adds	r3, #54	; 0x36
 8001af0:	460a      	mov	r2, r1
 8001af2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	015b      	lsls	r3, r3, #5
 8001afa:	4413      	add	r3, r2
 8001afc:	332b      	adds	r3, #43	; 0x2b
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	015b      	lsls	r3, r3, #5
 8001b08:	4413      	add	r3, r2
 8001b0a:	3338      	adds	r3, #56	; 0x38
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4413      	add	r3, r2
 8001b18:	333c      	adds	r3, #60	; 0x3c
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	3302      	adds	r3, #2
 8001b24:	015b      	lsls	r3, r3, #5
 8001b26:	4413      	add	r3, r2
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3c4      	bcc.n	8001ac6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e031      	b.n	8001ba6 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	015b      	lsls	r3, r3, #5
 8001b48:	4413      	add	r3, r2
 8001b4a:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	015b      	lsls	r3, r3, #5
 8001b68:	4413      	add	r3, r2
 8001b6a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	015b      	lsls	r3, r3, #5
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	015b      	lsls	r3, r3, #5
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	330a      	adds	r3, #10
 8001b98:	015b      	lsls	r3, r3, #5
 8001b9a:	4413      	add	r3, r2
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3c8      	bcc.n	8001b42 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	687e      	ldr	r6, [r7, #4]
 8001bb8:	466d      	mov	r5, sp
 8001bba:	f106 0410 	add.w	r4, r6, #16
 8001bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	602b      	str	r3, [r5, #0]
 8001bc6:	1d33      	adds	r3, r6, #4
 8001bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bca:	6838      	ldr	r0, [r7, #0]
 8001bcc:	f001 faf7 	bl	80031be <USB_DevInit>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00d      	b.n	8001bfe <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fb35 	bl	8004266 <USB_DevDisconnect>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_PCD_Start+0x16>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e016      	b.n	8001c4a <HAL_PCD_Start+0x44>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c24:	2101      	movs	r1, #1
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f004 fcc1 	bl	80065ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fb0e 	bl	8004252 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 fa80 	bl	8003140 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 fb0b 	bl	800427a <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6e:	d102      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fadf 	bl	8002234 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fafd 	bl	800427a <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8a:	d112      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f004 faae 	bl	8006206 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001caa:	2100      	movs	r1, #0
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8de 	bl	8001e6e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 fadf 	bl	800427a <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fac8 	bl	800427a <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fab1 	bl	800427a <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d22:	d126      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0204 	bic.w	r2, r2, #4
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0208 	bic.w	r2, r2, #8
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 fa8f 	bl	8006278 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fa7f 	bl	800427a <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d86:	d13d      	bne.n	8001e04 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0208 	orr.w	r2, r2, #8
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0204 	orr.w	r2, r2, #4
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fa50 	bl	800427a <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de4:	d10b      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f004 fa20 	bl	8006244 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 fa36 	bl	800427a <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d10e      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f004 f9d9 	bl	80061ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fa1c 	bl	800427a <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4c:	d10b      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e60:	b292      	uxth	r2, r2
 8001e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_SetAddress+0x1a>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e013      	b.n	8001eb0 <HAL_PCD_SetAddress+0x42>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 f9c3 	bl	800422c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	70fb      	strb	r3, [r7, #3]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	803b      	strh	r3, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da0b      	bge.n	8001ef6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	015b      	lsls	r3, r3, #5
 8001ee6:	3328      	adds	r3, #40	; 0x28
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	705a      	strb	r2, [r3, #1]
 8001ef4:	e00b      	b.n	8001f0e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f1a:	883a      	ldrh	r2, [r7, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	78ba      	ldrb	r2, [r7, #2]
 8001f24:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f38:	78bb      	ldrb	r3, [r7, #2]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d102      	bne.n	8001f44 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_Open+0x9a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_Open+0xb8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 f951 	bl	8003208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0b      	bge.n	8001fa4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	3328      	adds	r3, #40	; 0x28
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	705a      	strb	r2, [r3, #1]
 8001fa2:	e00b      	b.n	8001fbc <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	015b      	lsls	r3, r3, #5
 8001fac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_PCD_EP_Close+0x5e>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e00e      	b.n	8001ff4 <HAL_PCD_EP_Close+0x7c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fbfd 	bl	80037e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200c:	7afb      	ldrb	r3, [r7, #11]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	015b      	lsls	r3, r3, #5
 8002014:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2200      	movs	r2, #0
 8002034:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	b2da      	uxtb	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6979      	ldr	r1, [r7, #20]
 8002052:	4618      	mov	r0, r3
 8002054:	f001 fd5c 	bl	8003b10 <USB_EPStartXfer>
 8002058:	e005      	b.n	8002066 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6979      	ldr	r1, [r7, #20]
 8002060:	4618      	mov	r0, r3
 8002062:	f001 fd55 	bl	8003b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	460b      	mov	r3, r1
 800207e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	015b      	lsls	r3, r3, #5
 8002088:	3328      	adds	r3, #40	; 0x28
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6979      	ldr	r1, [r7, #20]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 fd23 	bl	8003b10 <USB_EPStartXfer>
 80020ca:	e005      	b.n	80020d8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6979      	ldr	r1, [r7, #20]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 fd1c 	bl	8003b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 0207 	and.w	r2, r3, #7
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d901      	bls.n	8002100 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e046      	b.n	800218e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002104:	2b00      	cmp	r3, #0
 8002106:	da0b      	bge.n	8002120 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	3328      	adds	r3, #40	; 0x28
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	705a      	strb	r2, [r3, #1]
 800211e:	e009      	b.n	8002134 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	015b      	lsls	r3, r3, #5
 8002124:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_PCD_EP_SetStall+0x72>
 8002150:	2302      	movs	r3, #2
 8002152:	e01c      	b.n	800218e <HAL_PCD_EP_SetStall+0xac>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	4618      	mov	r0, r3
 8002164:	f001 ff8c 	bl	8004080 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f002 f88a 	bl	8004298 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 020f 	and.w	r2, r3, #15
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d901      	bls.n	80021b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e03a      	b.n	800222a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0b      	bge.n	80021d4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	015b      	lsls	r3, r3, #5
 80021c4:	3328      	adds	r3, #40	; 0x28
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	705a      	strb	r2, [r3, #1]
 80021d2:	e00b      	b.n	80021ec <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	015b      	lsls	r3, r3, #5
 80021dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_PCD_EP_ClrStall+0x76>
 8002208:	2302      	movs	r3, #2
 800220a:	e00e      	b.n	800222a <HAL_PCD_EP_ClrStall+0x94>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	4618      	mov	r0, r3
 800221c:	f001 ff72 	bl	8004104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800223c:	e282      	b.n	8002744 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002246:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002248:	8afb      	ldrh	r3, [r7, #22]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002252:	7d7b      	ldrb	r3, [r7, #21]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 8142 	bne.w	80024de <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800225a:	8afb      	ldrh	r3, [r7, #22]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	d151      	bne.n	8002308 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002274:	b29c      	uxth	r4, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800227e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002282:	b29b      	uxth	r3, r3
 8002284:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3328      	adds	r3, #40	; 0x28
 800228a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	3302      	adds	r3, #2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022c6:	2100      	movs	r1, #0
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f003 ff77 	bl	80061bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8234 	beq.w	8002744 <PCD_EP_ISR_Handler+0x510>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 822f 	bne.w	8002744 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	b292      	uxth	r2, r2
 80022fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002306:	e21d      	b.n	8002744 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800230e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002318:	8a7b      	ldrh	r3, [r7, #18]
 800231a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231e:	2b00      	cmp	r3, #0
 8002320:	d033      	beq.n	800238a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	3306      	adds	r3, #6
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002360:	b29b      	uxth	r3, r3
 8002362:	f001 ffe8 	bl	8004336 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29a      	uxth	r2, r3
 800236e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002372:	4013      	ands	r3, r2
 8002374:	b29c      	uxth	r4, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800237e:	b292      	uxth	r2, r2
 8002380:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f003 fef0 	bl	8006168 <HAL_PCD_SetupStageCallback>
 8002388:	e1dc      	b.n	8002744 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800238a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f280 81d8 	bge.w	8002744 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29a      	uxth	r2, r3
 800239c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023a0:	4013      	ands	r3, r2
 80023a2:	b29c      	uxth	r4, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80023ac:	b292      	uxth	r2, r2
 80023ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	3306      	adds	r3, #6
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d019      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1e4>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f001 ff9a 	bl	8004336 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	441a      	add	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f003 feba 	bl	800618c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461c      	mov	r4, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	441c      	add	r4, r3
 800242a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800242e:	461c      	mov	r4, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10e      	bne.n	8002456 <PCD_EP_ISR_Handler+0x222>
 8002438:	8823      	ldrh	r3, [r4, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002440:	b29b      	uxth	r3, r3
 8002442:	8023      	strh	r3, [r4, #0]
 8002444:	8823      	ldrh	r3, [r4, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002450:	b29b      	uxth	r3, r3
 8002452:	8023      	strh	r3, [r4, #0]
 8002454:	e02d      	b.n	80024b2 <PCD_EP_ISR_Handler+0x27e>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b3e      	cmp	r3, #62	; 0x3e
 800245c:	d812      	bhi.n	8002484 <PCD_EP_ISR_Handler+0x250>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <PCD_EP_ISR_Handler+0x244>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3301      	adds	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	b29b      	uxth	r3, r3
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	b29b      	uxth	r3, r3
 8002480:	8023      	strh	r3, [r4, #0]
 8002482:	e016      	b.n	80024b2 <PCD_EP_ISR_Handler+0x27e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <PCD_EP_ISR_Handler+0x26a>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3b01      	subs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	b29c      	uxth	r4, r3
 80024c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80024c8:	b29c      	uxth	r4, r3
 80024ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80024ce:	b29c      	uxth	r4, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4ba2      	ldr	r3, [pc, #648]	; (8002760 <PCD_EP_ISR_Handler+0x52c>)
 80024d6:	4323      	orrs	r3, r4
 80024d8:	b29b      	uxth	r3, r3
 80024da:	8013      	strh	r3, [r2, #0]
 80024dc:	e132      	b.n	8002744 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	7d7b      	ldrb	r3, [r7, #21]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f280 80d1 	bge.w	800269a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	7d7b      	ldrb	r3, [r7, #21]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29a      	uxth	r2, r3
 8002508:	f640 738f 	movw	r3, #3983	; 0xf8f
 800250c:	4013      	ands	r3, r2
 800250e:	b29c      	uxth	r4, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	7d7b      	ldrb	r3, [r7, #21]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002520:	b292      	uxth	r2, r2
 8002522:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002524:	7d7b      	ldrb	r3, [r7, #21]
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	7b1b      	ldrb	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d121      	bne.n	800257e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	3306      	adds	r3, #6
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002562:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002564:	8bfb      	ldrh	r3, [r7, #30]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d072      	beq.n	8002650 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6959      	ldr	r1, [r3, #20]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88da      	ldrh	r2, [r3, #6]
 8002576:	8bfb      	ldrh	r3, [r7, #30]
 8002578:	f001 fedd 	bl	8004336 <USB_ReadPMA>
 800257c:	e068      	b.n	8002650 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d021      	beq.n	80025dc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	3302      	adds	r3, #2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80025c2:	8bfb      	ldrh	r3, [r7, #30]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02a      	beq.n	800261e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6959      	ldr	r1, [r3, #20]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	891a      	ldrh	r2, [r3, #8]
 80025d4:	8bfb      	ldrh	r3, [r7, #30]
 80025d6:	f001 feae 	bl	8004336 <USB_ReadPMA>
 80025da:	e020      	b.n	800261e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	3306      	adds	r3, #6
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002604:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002606:	8bfb      	ldrh	r3, [r7, #30]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6959      	ldr	r1, [r3, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	895a      	ldrh	r2, [r3, #10]
 8002618:	8bfb      	ldrh	r3, [r7, #30]
 800261a:	f001 fe8c 	bl	8004336 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002638:	b29c      	uxth	r4, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	441a      	add	r2, r3
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <PCD_EP_ISR_Handler+0x530>)
 800264a:	4323      	orrs	r3, r4
 800264c:	b29b      	uxth	r3, r3
 800264e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	8bfb      	ldrh	r3, [r7, #30]
 8002656:	441a      	add	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	8bfb      	ldrh	r3, [r7, #30]
 8002662:	441a      	add	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <PCD_EP_ISR_Handler+0x446>
 8002670:	8bfa      	ldrh	r2, [r7, #30]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d206      	bcs.n	8002688 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f003 fd83 	bl	800618c <HAL_PCD_DataOutStageCallback>
 8002686:	e008      	b.n	800269a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	7819      	ldrb	r1, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fcb1 	bl	8001ffc <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800269a:	8a7b      	ldrh	r3, [r7, #18]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d04f      	beq.n	8002744 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80026a4:	7d7b      	ldrb	r3, [r7, #21]
 80026a6:	015b      	lsls	r3, r3, #5
 80026a8:	3328      	adds	r3, #40	; 0x28
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	7d7b      	ldrb	r3, [r7, #21]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c8:	b29c      	uxth	r4, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	7d7b      	ldrb	r3, [r7, #21]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80026da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026de:	b29b      	uxth	r3, r3
 80026e0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	3302      	adds	r3, #2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	441a      	add	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f003 fd46 	bl	80061bc <HAL_PCD_DataInStageCallback>
 8002730:	e008      	b.n	8002744 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	7819      	ldrb	r1, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fc96 	bl	8002070 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800274c:	b29b      	uxth	r3, r3
 800274e:	b21b      	sxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f6ff ad74 	blt.w	800223e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3724      	adds	r7, #36	; 0x24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	ffff8080 	.word	0xffff8080
 8002764:	ffff80c0 	.word	0xffff80c0

08002768 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	817b      	strh	r3, [r7, #10]
 8002776:	4613      	mov	r3, r2
 8002778:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002786:	897b      	ldrh	r3, [r7, #10]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	015b      	lsls	r3, r3, #5
 800278e:	3328      	adds	r3, #40	; 0x28
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e006      	b.n	80027a6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002798:	897b      	ldrh	r3, [r7, #10]
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027a6:	893b      	ldrh	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2200      	movs	r2, #0
 80027b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	80da      	strh	r2, [r3, #6]
 80027ba:	e00b      	b.n	80027d4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2201      	movs	r2, #1
 80027c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e26c      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8087 	beq.w	800290e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002800:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b04      	cmp	r3, #4
 800280a:	d00c      	beq.n	8002826 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800280c:	4b8f      	ldr	r3, [pc, #572]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d112      	bne.n	800283e <HAL_RCC_OscConfig+0x5e>
 8002818:	4b8c      	ldr	r3, [pc, #560]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d10b      	bne.n	800283e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002826:	4b89      	ldr	r3, [pc, #548]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d06c      	beq.n	800290c <HAL_RCC_OscConfig+0x12c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d168      	bne.n	800290c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e246      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x76>
 8002848:	4b80      	ldr	r3, [pc, #512]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7f      	ldr	r2, [pc, #508]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	e02e      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x98>
 800285e:	4b7b      	ldr	r3, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7a      	ldr	r2, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b78      	ldr	r3, [pc, #480]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a77      	ldr	r2, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01d      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0xbc>
 8002882:	4b72      	ldr	r3, [pc, #456]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a71      	ldr	r2, [pc, #452]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0xd4>
 800289c:	4b6b      	ldr	r3, [pc, #428]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6a      	ldr	r2, [pc, #424]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a67      	ldr	r2, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe f88e 	bl	80009dc <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe f88a 	bl	80009dc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1fa      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe4>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f87a 	bl	80009dc <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe f876 	bl	80009dc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1e6      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x10c>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800291a:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x18c>
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d116      	bne.n	800296c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x176>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1ba      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4939      	ldr	r1, [pc, #228]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	e03a      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_RCC_OscConfig+0x270>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe f82f 	bl	80009dc <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002982:	f7fe f82b 	bl	80009dc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e19b      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4927      	ldr	r1, [pc, #156]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <HAL_RCC_OscConfig+0x270>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe f80e 	bl	80009dc <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe f80a 	bl	80009dc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e17a      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d03a      	beq.n	8002a64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d019      	beq.n	8002a2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_RCC_OscConfig+0x274>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7fd ffee 	bl	80009dc <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fd ffea 	bl	80009dc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e15a      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f000 faa8 	bl	8002f78 <RCC_Delay>
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7fd ffd4 	bl	80009dc <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a36:	e00f      	b.n	8002a58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fd ffd0 	bl	80009dc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d908      	bls.n	8002a58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e140      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	42420000 	.word	0x42420000
 8002a54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e9      	bne.n	8002a38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a6 	beq.w	8002bbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b97      	ldr	r3, [pc, #604]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10d      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b94      	ldr	r3, [pc, #592]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a93      	ldr	r2, [pc, #588]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b91      	ldr	r3, [pc, #580]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b8e      	ldr	r3, [pc, #568]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a8a      	ldr	r2, [pc, #552]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fd ff91 	bl	80009dc <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fd ff8d 	bl	80009dc <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	; 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0fd      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x312>
 8002ae4:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4a7a      	ldr	r2, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6213      	str	r3, [r2, #32]
 8002af0:	e02d      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x334>
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a72      	ldr	r2, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	e01c      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x356>
 8002b1c:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a6c      	ldr	r2, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a69      	ldr	r2, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	e00b      	b.n	8002b4e <HAL_RCC_OscConfig+0x36e>
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a66      	ldr	r2, [pc, #408]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fd ff41 	bl	80009dc <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fd ff3d 	bl	80009dc <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0ab      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ee      	beq.n	8002b5e <HAL_RCC_OscConfig+0x37e>
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7fd ff2b 	bl	80009dc <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fd ff27 	bl	80009dc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e095      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ee      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d105      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb2:	4b48      	ldr	r3, [pc, #288]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8081 	beq.w	8002cca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d061      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d146      	bne.n	8002c6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fd fefb 	bl	80009dc <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fd fef7 	bl	80009dc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e067      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	492d      	ldr	r1, [pc, #180]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a19      	ldr	r1, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	430b      	orrs	r3, r1
 8002c36:	4927      	ldr	r1, [pc, #156]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fd fecb 	bl	80009dc <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fd fec7 	bl	80009dc <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e037      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x46a>
 8002c68:	e02f      	b.n	8002cca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCC_OscConfig+0x4fc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fd feb4 	bl	80009dc <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fd feb0 	bl	80009dc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e020      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x498>
 8002c96:	e018      	b.n	8002cca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	42420060 	.word	0x42420060

08002ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0d0      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d910      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0207 	bic.w	r2, r3, #7
 8002d0a:	4965      	ldr	r1, [pc, #404]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d040      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d115      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e073      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4936      	ldr	r1, [pc, #216]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7fd fe04 	bl	80009dc <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fd fe00 	bl	80009dc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e053      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d210      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0207 	bic.w	r2, r3, #7
 8002e16:	4922      	ldr	r1, [pc, #136]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4601      	mov	r1, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	fa21 f303 	lsr.w	r3, r1, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1cc>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fd62 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08006a28 	.word	0x08006a28
 8002eac:	200000dc 	.word	0x200000dc
 8002eb0:	20000000 	.word	0x20000000

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b490      	push	{r4, r7}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ebc:	1d3c      	adds	r4, r7, #4
 8002ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ec4:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x46>
 8002ef2:	e02d      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	e02d      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f06:	4413      	add	r3, r2
 8002f08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c5b      	lsrs	r3, r3, #17
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f26:	4413      	add	r3, r2
 8002f28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f32:	fb02 f203 	mul.w	r2, r2, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	e004      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	623b      	str	r3, [r7, #32]
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	6a3b      	ldr	r3, [r7, #32]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc90      	pop	{r4, r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	080069b8 	.word	0x080069b8
 8002f68:	080069c8 	.word	0x080069c8
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	003d0900 	.word	0x003d0900

08002f78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <RCC_Delay+0x34>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <RCC_Delay+0x38>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0a5b      	lsrs	r3, r3, #9
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f94:	bf00      	nop
  }
  while (Delay --);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <RCC_Delay+0x1c>
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200000dc 	.word	0x200000dc
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d07d      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4a4b      	ldr	r2, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	61d3      	str	r3, [r2, #28]
 8002fec:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d118      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a42      	ldr	r2, [pc, #264]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fd fce2 	bl	80009dc <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	e008      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fd fcde 	bl	80009dc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e06d      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d02e      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d027      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800306e:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d014      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fd fcad 	bl	80009dc <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fd fca9 	bl	80009dc <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e036      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ee      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4917      	ldr	r1, [pc, #92]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	490b      	ldr	r1, [pc, #44]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
 800311c:	42420440 	.word	0x42420440

08003120 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003120:	b084      	sub	sp, #16
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	f107 0014 	add.w	r0, r7, #20
 800312e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	b004      	add	sp, #16
 800313e:	4770      	bx	lr

08003140 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003148:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800314c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003154:	b29a      	uxth	r2, r3
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	4313      	orrs	r3, r2
 800315a:	b29a      	uxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003176:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800317a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003182:	b29b      	uxth	r3, r3
 8003184:	b21a      	sxth	r2, r3
 8003186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800318a:	43db      	mvns	r3, r3
 800318c:	b21b      	sxth	r3, r3
 800318e:	4013      	ands	r3, r2
 8003190:	b21b      	sxth	r3, r3
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031be:	b084      	sub	sp, #16
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	f107 0014 	add.w	r0, r7, #20
 80031cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ffa5 	bl	8003140 <USB_EnableGlobalInt>

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003202:	b004      	add	sp, #16
 8003204:	4770      	bx	lr
	...

08003208 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003208:	b490      	push	{r4, r7}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	78db      	ldrb	r3, [r3, #3]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d819      	bhi.n	800326a <USB_ActivateEndpoint+0x62>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <USB_ActivateEndpoint+0x34>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	0800324d 	.word	0x0800324d
 8003240:	08003261 	.word	0x08003261
 8003244:	08003271 	.word	0x08003271
 8003248:	08003257 	.word	0x08003257
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800324c:	89bb      	ldrh	r3, [r7, #12]
 800324e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003252:	81bb      	strh	r3, [r7, #12]
      break;
 8003254:	e00d      	b.n	8003272 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003256:	89bb      	ldrh	r3, [r7, #12]
 8003258:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800325c:	81bb      	strh	r3, [r7, #12]
      break;
 800325e:	e008      	b.n	8003272 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003260:	89bb      	ldrh	r3, [r7, #12]
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	81bb      	strh	r3, [r7, #12]
      break;
 8003268:	e003      	b.n	8003272 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
      break;
 800326e:	e000      	b.n	8003272 <USB_ActivateEndpoint+0x6a>
      break;
 8003270:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	89bb      	ldrh	r3, [r7, #12]
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b29c      	uxth	r4, r3
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <USB_ActivateEndpoint+0x2e0>)
 80032c0:	4323      	orrs	r3, r4
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	7b1b      	ldrb	r3, [r3, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 8112 	bne.w	80034f4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d067      	beq.n	80033a8 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032d8:	687c      	ldr	r4, [r7, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	441c      	add	r4, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	4423      	add	r3, r4
 80032ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f0:	461c      	mov	r4, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	88db      	ldrh	r3, [r3, #6]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29c      	uxth	r4, r3
 800330e:	4623      	mov	r3, r4
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d014      	beq.n	8003342 <USB_ActivateEndpoint+0x13a>
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	b29c      	uxth	r4, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	4b6c      	ldr	r3, [pc, #432]	; (80034ec <USB_ActivateEndpoint+0x2e4>)
 800333c:	4323      	orrs	r3, r4
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	78db      	ldrb	r3, [r3, #3]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d018      	beq.n	800337c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	b29c      	uxth	r4, r3
 8003362:	f084 0320 	eor.w	r3, r4, #32
 8003366:	b29c      	uxth	r4, r3
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <USB_ActivateEndpoint+0x2e0>)
 8003374:	4323      	orrs	r3, r4
 8003376:	b29b      	uxth	r3, r3
 8003378:	8013      	strh	r3, [r2, #0]
 800337a:	e22b      	b.n	80037d4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	b29c      	uxth	r4, r3
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <USB_ActivateEndpoint+0x2e0>)
 80033a0:	4323      	orrs	r3, r4
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	8013      	strh	r3, [r2, #0]
 80033a6:	e215      	b.n	80037d4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033a8:	687c      	ldr	r4, [r7, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	441c      	add	r4, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4423      	add	r3, r4
 80033bc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80033c0:	461c      	mov	r4, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	88db      	ldrh	r3, [r3, #6]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80033d0:	687c      	ldr	r4, [r7, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d8:	b29b      	uxth	r3, r3
 80033da:	441c      	add	r4, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4423      	add	r3, r4
 80033e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033e8:	461c      	mov	r4, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10e      	bne.n	8003410 <USB_ActivateEndpoint+0x208>
 80033f2:	8823      	ldrh	r3, [r4, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	8023      	strh	r3, [r4, #0]
 80033fe:	8823      	ldrh	r3, [r4, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800340a:	b29b      	uxth	r3, r3
 800340c:	8023      	strh	r3, [r4, #0]
 800340e:	e02d      	b.n	800346c <USB_ActivateEndpoint+0x264>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b3e      	cmp	r3, #62	; 0x3e
 8003416:	d812      	bhi.n	800343e <USB_ActivateEndpoint+0x236>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <USB_ActivateEndpoint+0x22a>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	b29b      	uxth	r3, r3
 8003436:	029b      	lsls	r3, r3, #10
 8003438:	b29b      	uxth	r3, r3
 800343a:	8023      	strh	r3, [r4, #0]
 800343c:	e016      	b.n	800346c <USB_ActivateEndpoint+0x264>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <USB_ActivateEndpoint+0x250>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3b01      	subs	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	b29b      	uxth	r3, r3
 800345c:	029b      	lsls	r3, r3, #10
 800345e:	b29b      	uxth	r3, r3
 8003460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003468:	b29b      	uxth	r3, r3
 800346a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29c      	uxth	r4, r3
 800347a:	4623      	mov	r3, r4
 800347c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d014      	beq.n	80034ae <USB_ActivateEndpoint+0x2a6>
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	b29c      	uxth	r4, r3
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <USB_ActivateEndpoint+0x2e8>)
 80034a8:	4323      	orrs	r3, r4
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	b29c      	uxth	r4, r3
 80034c6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80034ca:	b29c      	uxth	r4, r3
 80034cc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80034d0:	b29c      	uxth	r4, r3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	4b02      	ldr	r3, [pc, #8]	; (80034e8 <USB_ActivateEndpoint+0x2e0>)
 80034de:	4323      	orrs	r3, r4
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
 80034e4:	e176      	b.n	80037d4 <USB_ActivateEndpoint+0x5cc>
 80034e6:	bf00      	nop
 80034e8:	ffff8080 	.word	0xffff8080
 80034ec:	ffff80c0 	.word	0xffff80c0
 80034f0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350a:	b29c      	uxth	r4, r3
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	4b96      	ldr	r3, [pc, #600]	; (8003770 <USB_ActivateEndpoint+0x568>)
 8003518:	4323      	orrs	r3, r4
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800351e:	687c      	ldr	r4, [r7, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	441c      	add	r4, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	4423      	add	r3, r4
 8003532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003536:	461c      	mov	r4, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	891b      	ldrh	r3, [r3, #8]
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	b29b      	uxth	r3, r3
 8003544:	8023      	strh	r3, [r4, #0]
 8003546:	687c      	ldr	r4, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354e:	b29b      	uxth	r3, r3
 8003550:	441c      	add	r4, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4423      	add	r3, r4
 800355a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800355e:	461c      	mov	r4, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	895b      	ldrh	r3, [r3, #10]
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	b29b      	uxth	r3, r3
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	b29b      	uxth	r3, r3
 800356c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8088 	bne.w	8003688 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29c      	uxth	r4, r3
 8003586:	4623      	mov	r3, r4
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d014      	beq.n	80035ba <USB_ActivateEndpoint+0x3b2>
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	b29c      	uxth	r4, r3
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <USB_ActivateEndpoint+0x56c>)
 80035b4:	4323      	orrs	r3, r4
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29c      	uxth	r4, r3
 80035c8:	4623      	mov	r3, r4
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d014      	beq.n	80035fc <USB_ActivateEndpoint+0x3f4>
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e8:	b29c      	uxth	r4, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	441a      	add	r2, r3
 80035f4:	4b60      	ldr	r3, [pc, #384]	; (8003778 <USB_ActivateEndpoint+0x570>)
 80035f6:	4323      	orrs	r3, r4
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	b29c      	uxth	r4, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	4b56      	ldr	r3, [pc, #344]	; (8003778 <USB_ActivateEndpoint+0x570>)
 8003620:	4323      	orrs	r3, r4
 8003622:	b29b      	uxth	r3, r3
 8003624:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	b29c      	uxth	r4, r3
 800363e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003642:	b29c      	uxth	r4, r3
 8003644:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003648:	b29c      	uxth	r4, r3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	4b49      	ldr	r3, [pc, #292]	; (800377c <USB_ActivateEndpoint+0x574>)
 8003656:	4323      	orrs	r3, r4
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	b29c      	uxth	r4, r3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	4b3f      	ldr	r3, [pc, #252]	; (800377c <USB_ActivateEndpoint+0x574>)
 8003680:	4323      	orrs	r3, r4
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]
 8003686:	e0a5      	b.n	80037d4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29c      	uxth	r4, r3
 8003696:	4623      	mov	r3, r4
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d014      	beq.n	80036ca <USB_ActivateEndpoint+0x4c2>
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	b29c      	uxth	r4, r3
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <USB_ActivateEndpoint+0x56c>)
 80036c4:	4323      	orrs	r3, r4
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29c      	uxth	r4, r3
 80036d8:	4623      	mov	r3, r4
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d014      	beq.n	800370c <USB_ActivateEndpoint+0x504>
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	b29c      	uxth	r4, r3
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	441a      	add	r2, r3
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <USB_ActivateEndpoint+0x570>)
 8003706:	4323      	orrs	r3, r4
 8003708:	b29b      	uxth	r3, r3
 800370a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	b29c      	uxth	r4, r3
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	441a      	add	r2, r3
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <USB_ActivateEndpoint+0x56c>)
 8003730:	4323      	orrs	r3, r4
 8003732:	b29b      	uxth	r3, r3
 8003734:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	78db      	ldrb	r3, [r3, #3]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d020      	beq.n	8003780 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003754:	b29c      	uxth	r4, r3
 8003756:	f084 0320 	eor.w	r3, r4, #32
 800375a:	b29c      	uxth	r4, r3
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <USB_ActivateEndpoint+0x574>)
 8003768:	4323      	orrs	r3, r4
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]
 800376e:	e01c      	b.n	80037aa <USB_ActivateEndpoint+0x5a2>
 8003770:	ffff8180 	.word	0xffff8180
 8003774:	ffffc080 	.word	0xffffc080
 8003778:	ffff80c0 	.word	0xffff80c0
 800377c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003796:	b29c      	uxth	r4, r3
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <USB_ActivateEndpoint+0x5d8>)
 80037a4:	4323      	orrs	r3, r4
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c0:	b29c      	uxth	r4, r3
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <USB_ActivateEndpoint+0x5d8>)
 80037ce:	4323      	orrs	r3, r4
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc90      	pop	{r4, r7}
 80037de:	4770      	bx	lr
 80037e0:	ffff8080 	.word	0xffff8080

080037e4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037e4:	b490      	push	{r4, r7}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	7b1b      	ldrb	r3, [r3, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d171      	bne.n	80038da <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d036      	beq.n	800386c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29c      	uxth	r4, r3
 800380c:	4623      	mov	r3, r4
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d014      	beq.n	8003840 <USB_DeactivateEndpoint+0x5c>
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382c:	b29c      	uxth	r4, r3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	4b6b      	ldr	r3, [pc, #428]	; (80039e8 <USB_DeactivateEndpoint+0x204>)
 800383a:	4323      	orrs	r3, r4
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003856:	b29c      	uxth	r4, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	4b62      	ldr	r3, [pc, #392]	; (80039ec <USB_DeactivateEndpoint+0x208>)
 8003864:	4323      	orrs	r3, r4
 8003866:	b29b      	uxth	r3, r3
 8003868:	8013      	strh	r3, [r2, #0]
 800386a:	e144      	b.n	8003af6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29c      	uxth	r4, r3
 800387a:	4623      	mov	r3, r4
 800387c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d014      	beq.n	80038ae <USB_DeactivateEndpoint+0xca>
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	b29c      	uxth	r4, r3
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	4b52      	ldr	r3, [pc, #328]	; (80039f0 <USB_DeactivateEndpoint+0x20c>)
 80038a8:	4323      	orrs	r3, r4
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c4:	b29c      	uxth	r4, r3
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	4b46      	ldr	r3, [pc, #280]	; (80039ec <USB_DeactivateEndpoint+0x208>)
 80038d2:	4323      	orrs	r3, r4
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8013      	strh	r3, [r2, #0]
 80038d8:	e10d      	b.n	8003af6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8088 	bne.w	80039f4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29c      	uxth	r4, r3
 80038f2:	4623      	mov	r3, r4
 80038f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d014      	beq.n	8003926 <USB_DeactivateEndpoint+0x142>
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b29b      	uxth	r3, r3
 800390a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	b29c      	uxth	r4, r3
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <USB_DeactivateEndpoint+0x20c>)
 8003920:	4323      	orrs	r3, r4
 8003922:	b29b      	uxth	r3, r3
 8003924:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29c      	uxth	r4, r3
 8003934:	4623      	mov	r3, r4
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d014      	beq.n	8003968 <USB_DeactivateEndpoint+0x184>
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003954:	b29c      	uxth	r4, r3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	441a      	add	r2, r3
 8003960:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <USB_DeactivateEndpoint+0x204>)
 8003962:	4323      	orrs	r3, r4
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	b29c      	uxth	r4, r3
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <USB_DeactivateEndpoint+0x204>)
 800398c:	4323      	orrs	r3, r4
 800398e:	b29b      	uxth	r3, r3
 8003990:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a8:	b29c      	uxth	r4, r3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <USB_DeactivateEndpoint+0x208>)
 80039b6:	4323      	orrs	r3, r4
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	b29c      	uxth	r4, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	4b03      	ldr	r3, [pc, #12]	; (80039ec <USB_DeactivateEndpoint+0x208>)
 80039e0:	4323      	orrs	r3, r4
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]
 80039e6:	e086      	b.n	8003af6 <USB_DeactivateEndpoint+0x312>
 80039e8:	ffff80c0 	.word	0xffff80c0
 80039ec:	ffff8080 	.word	0xffff8080
 80039f0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29c      	uxth	r4, r3
 8003a02:	4623      	mov	r3, r4
 8003a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d014      	beq.n	8003a36 <USB_DeactivateEndpoint+0x252>
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	b29c      	uxth	r4, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <USB_DeactivateEndpoint+0x320>)
 8003a30:	4323      	orrs	r3, r4
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29c      	uxth	r4, r3
 8003a44:	4623      	mov	r3, r4
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <USB_DeactivateEndpoint+0x294>
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	b29c      	uxth	r4, r3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	441a      	add	r2, r3
 8003a70:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <USB_DeactivateEndpoint+0x324>)
 8003a72:	4323      	orrs	r3, r4
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	b29c      	uxth	r4, r3
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	441a      	add	r2, r3
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <USB_DeactivateEndpoint+0x320>)
 8003a9c:	4323      	orrs	r3, r4
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab8:	b29c      	uxth	r4, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	441a      	add	r2, r3
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <USB_DeactivateEndpoint+0x328>)
 8003ac6:	4323      	orrs	r3, r4
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	b29c      	uxth	r4, r3
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <USB_DeactivateEndpoint+0x328>)
 8003af0:	4323      	orrs	r3, r4
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc90      	pop	{r4, r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	ffffc080 	.word	0xffffc080
 8003b08:	ffff80c0 	.word	0xffff80c0
 8003b0c:	ffff8080 	.word	0xffff8080

08003b10 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b08d      	sub	sp, #52	; 0x34
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	785b      	ldrb	r3, [r3, #1]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	f040 8160 	bne.w	8003de4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d909      	bls.n	8003b44 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	1ad2      	subs	r2, r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	619a      	str	r2, [r3, #24]
 8003b42:	e005      	b.n	8003b50 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	7b1b      	ldrb	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d119      	bne.n	8003b8c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6959      	ldr	r1, [r3, #20]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	88da      	ldrh	r2, [r3, #6]
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fba2 	bl	80042ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003b6a:	687c      	ldr	r4, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	441c      	add	r4, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	4423      	add	r3, r4
 8003b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b82:	461c      	mov	r4, r3
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8023      	strh	r3, [r4, #0]
 8003b8a:	e10f      	b.n	8003dac <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d065      	beq.n	8003c6e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ba2:	687c      	ldr	r4, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d148      	bne.n	8003c3e <USB_EPStartXfer+0x12e>
 8003bac:	687c      	ldr	r4, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	441c      	add	r4, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	4423      	add	r3, r4
 8003bc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bc4:	461c      	mov	r4, r3
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10e      	bne.n	8003bea <USB_EPStartXfer+0xda>
 8003bcc:	8823      	ldrh	r3, [r4, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8023      	strh	r3, [r4, #0]
 8003bd8:	8823      	ldrh	r3, [r4, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	8023      	strh	r3, [r4, #0]
 8003be8:	e03d      	b.n	8003c66 <USB_EPStartXfer+0x156>
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	2b3e      	cmp	r3, #62	; 0x3e
 8003bee:	d810      	bhi.n	8003c12 <USB_EPStartXfer+0x102>
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <USB_EPStartXfer+0xf6>
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3301      	adds	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8023      	strh	r3, [r4, #0]
 8003c10:	e029      	b.n	8003c66 <USB_EPStartXfer+0x156>
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <USB_EPStartXfer+0x118>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	3b01      	subs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	029b      	lsls	r3, r3, #10
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	8023      	strh	r3, [r4, #0]
 8003c3c:	e013      	b.n	8003c66 <USB_EPStartXfer+0x156>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10f      	bne.n	8003c66 <USB_EPStartXfer+0x156>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	441c      	add	r4, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4423      	add	r3, r4
 8003c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	895b      	ldrh	r3, [r3, #10]
 8003c6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003c6c:	e063      	b.n	8003d36 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	785b      	ldrb	r3, [r3, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d148      	bne.n	8003d08 <USB_EPStartXfer+0x1f8>
 8003c76:	687c      	ldr	r4, [r7, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	441c      	add	r4, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4423      	add	r3, r4
 8003c8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c8e:	461c      	mov	r4, r3
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10e      	bne.n	8003cb4 <USB_EPStartXfer+0x1a4>
 8003c96:	8823      	ldrh	r3, [r4, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8023      	strh	r3, [r4, #0]
 8003ca2:	8823      	ldrh	r3, [r4, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8023      	strh	r3, [r4, #0]
 8003cb2:	e03d      	b.n	8003d30 <USB_EPStartXfer+0x220>
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8003cb8:	d810      	bhi.n	8003cdc <USB_EPStartXfer+0x1cc>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <USB_EPStartXfer+0x1c0>
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	029b      	lsls	r3, r3, #10
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8023      	strh	r3, [r4, #0]
 8003cda:	e029      	b.n	8003d30 <USB_EPStartXfer+0x220>
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <USB_EPStartXfer+0x1e2>
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	029b      	lsls	r3, r3, #10
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	8023      	strh	r3, [r4, #0]
 8003d06:	e013      	b.n	8003d30 <USB_EPStartXfer+0x220>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10f      	bne.n	8003d30 <USB_EPStartXfer+0x220>
 8003d10:	687c      	ldr	r4, [r7, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	441c      	add	r4, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	4423      	add	r3, r4
 8003d24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d28:	461c      	mov	r4, r3
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	891b      	ldrh	r3, [r3, #8]
 8003d34:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6959      	ldr	r1, [r3, #20]
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fab4 	bl	80042ae <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <USB_EPStartXfer+0x26a>
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	b29c      	uxth	r4, r3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	441a      	add	r2, r3
 8003d70:	4b9a      	ldr	r3, [pc, #616]	; (8003fdc <USB_EPStartXfer+0x4cc>)
 8003d72:	4323      	orrs	r3, r4
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	8013      	strh	r3, [r2, #0]
 8003d78:	e018      	b.n	8003dac <USB_EPStartXfer+0x29c>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d114      	bne.n	8003dac <USB_EPStartXfer+0x29c>
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d98:	b29c      	uxth	r4, r3
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	441a      	add	r2, r3
 8003da4:	4b8e      	ldr	r3, [pc, #568]	; (8003fe0 <USB_EPStartXfer+0x4d0>)
 8003da6:	4323      	orrs	r3, r4
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc2:	b29c      	uxth	r4, r3
 8003dc4:	f084 0310 	eor.w	r3, r4, #16
 8003dc8:	b29c      	uxth	r4, r3
 8003dca:	f084 0320 	eor.w	r3, r4, #32
 8003dce:	b29c      	uxth	r4, r3
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	4b82      	ldr	r3, [pc, #520]	; (8003fe4 <USB_EPStartXfer+0x4d4>)
 8003ddc:	4323      	orrs	r3, r4
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8013      	strh	r3, [r2, #0]
 8003de2:	e146      	b.n	8004072 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d909      	bls.n	8003e04 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	1ad2      	subs	r2, r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	619a      	str	r2, [r3, #24]
 8003e02:	e005      	b.n	8003e10 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	7b1b      	ldrb	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d148      	bne.n	8003eaa <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003e18:	687c      	ldr	r4, [r7, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	441c      	add	r4, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4423      	add	r3, r4
 8003e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e30:	461c      	mov	r4, r3
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10e      	bne.n	8003e56 <USB_EPStartXfer+0x346>
 8003e38:	8823      	ldrh	r3, [r4, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8023      	strh	r3, [r4, #0]
 8003e44:	8823      	ldrh	r3, [r4, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8023      	strh	r3, [r4, #0]
 8003e54:	e0f2      	b.n	800403c <USB_EPStartXfer+0x52c>
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	2b3e      	cmp	r3, #62	; 0x3e
 8003e5a:	d810      	bhi.n	8003e7e <USB_EPStartXfer+0x36e>
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <USB_EPStartXfer+0x362>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	029b      	lsls	r3, r3, #10
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8023      	strh	r3, [r4, #0]
 8003e7c:	e0de      	b.n	800403c <USB_EPStartXfer+0x52c>
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <USB_EPStartXfer+0x384>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	029b      	lsls	r3, r3, #10
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	8023      	strh	r3, [r4, #0]
 8003ea8:	e0c8      	b.n	800403c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d148      	bne.n	8003f44 <USB_EPStartXfer+0x434>
 8003eb2:	687c      	ldr	r4, [r7, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	441c      	add	r4, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	4423      	add	r3, r4
 8003ec6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eca:	461c      	mov	r4, r3
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10e      	bne.n	8003ef0 <USB_EPStartXfer+0x3e0>
 8003ed2:	8823      	ldrh	r3, [r4, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	8023      	strh	r3, [r4, #0]
 8003ede:	8823      	ldrh	r3, [r4, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8023      	strh	r3, [r4, #0]
 8003eee:	e03d      	b.n	8003f6c <USB_EPStartXfer+0x45c>
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ef4:	d810      	bhi.n	8003f18 <USB_EPStartXfer+0x408>
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <USB_EPStartXfer+0x3fc>
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	029b      	lsls	r3, r3, #10
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	8023      	strh	r3, [r4, #0]
 8003f16:	e029      	b.n	8003f6c <USB_EPStartXfer+0x45c>
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <USB_EPStartXfer+0x41e>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	029b      	lsls	r3, r3, #10
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	8023      	strh	r3, [r4, #0]
 8003f42:	e013      	b.n	8003f6c <USB_EPStartXfer+0x45c>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10f      	bne.n	8003f6c <USB_EPStartXfer+0x45c>
 8003f4c:	687c      	ldr	r4, [r7, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	441c      	add	r4, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	4423      	add	r3, r4
 8003f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f64:	461c      	mov	r4, r3
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	8023      	strh	r3, [r4, #0]
 8003f6c:	687c      	ldr	r4, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d14e      	bne.n	8004014 <USB_EPStartXfer+0x504>
 8003f76:	687c      	ldr	r4, [r7, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	441c      	add	r4, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	4423      	add	r3, r4
 8003f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f8e:	461c      	mov	r4, r3
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10e      	bne.n	8003fb4 <USB_EPStartXfer+0x4a4>
 8003f96:	8823      	ldrh	r3, [r4, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8023      	strh	r3, [r4, #0]
 8003fa2:	8823      	ldrh	r3, [r4, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8023      	strh	r3, [r4, #0]
 8003fb2:	e043      	b.n	800403c <USB_EPStartXfer+0x52c>
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb8:	d816      	bhi.n	8003fe8 <USB_EPStartXfer+0x4d8>
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <USB_EPStartXfer+0x4c0>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	8023      	strh	r3, [r4, #0]
 8003fda:	e02f      	b.n	800403c <USB_EPStartXfer+0x52c>
 8003fdc:	ffff80c0 	.word	0xffff80c0
 8003fe0:	ffffc080 	.word	0xffffc080
 8003fe4:	ffff8080 	.word	0xffff8080
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <USB_EPStartXfer+0x4ee>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	b29b      	uxth	r3, r3
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	b29b      	uxth	r3, r3
 8004006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400e:	b29b      	uxth	r3, r3
 8004010:	8023      	strh	r3, [r4, #0]
 8004012:	e013      	b.n	800403c <USB_EPStartXfer+0x52c>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10f      	bne.n	800403c <USB_EPStartXfer+0x52c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004022:	b29b      	uxth	r3, r3
 8004024:	441c      	add	r4, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	4423      	add	r3, r4
 800402e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	b29a      	uxth	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	b29c      	uxth	r4, r3
 8004054:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004058:	b29c      	uxth	r4, r3
 800405a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800405e:	b29c      	uxth	r4, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	4b04      	ldr	r3, [pc, #16]	; (800407c <USB_EPStartXfer+0x56c>)
 800406c:	4323      	orrs	r3, r4
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3734      	adds	r7, #52	; 0x34
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}
 800407c:	ffff8080 	.word	0xffff8080

08004080 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004080:	b490      	push	{r4, r7}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a8:	b29c      	uxth	r4, r3
 80040aa:	f084 0310 	eor.w	r3, r4, #16
 80040ae:	b29c      	uxth	r4, r3
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <USB_EPSetStall+0x80>)
 80040bc:	4323      	orrs	r3, r4
 80040be:	b29b      	uxth	r3, r3
 80040c0:	8013      	strh	r3, [r2, #0]
 80040c2:	e017      	b.n	80040f4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	b29c      	uxth	r4, r3
 80040dc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80040e0:	b29c      	uxth	r4, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <USB_EPSetStall+0x80>)
 80040ee:	4323      	orrs	r3, r4
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc90      	pop	{r4, r7}
 80040fe:	4770      	bx	lr
 8004100:	ffff8080 	.word	0xffff8080

08004104 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004104:	b490      	push	{r4, r7}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	7b1b      	ldrb	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d17d      	bne.n	8004212 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d03d      	beq.n	800419a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29c      	uxth	r4, r3
 800412c:	4623      	mov	r3, r4
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d014      	beq.n	8004160 <USB_EPClearStall+0x5c>
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414c:	b29c      	uxth	r4, r3
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	441a      	add	r2, r3
 8004158:	4b31      	ldr	r3, [pc, #196]	; (8004220 <USB_EPClearStall+0x11c>)
 800415a:	4323      	orrs	r3, r4
 800415c:	b29b      	uxth	r3, r3
 800415e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d054      	beq.n	8004212 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417e:	b29c      	uxth	r4, r3
 8004180:	f084 0320 	eor.w	r3, r4, #32
 8004184:	b29c      	uxth	r4, r3
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <USB_EPClearStall+0x120>)
 8004192:	4323      	orrs	r3, r4
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]
 8004198:	e03b      	b.n	8004212 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29c      	uxth	r4, r3
 80041a8:	4623      	mov	r3, r4
 80041aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <USB_EPClearStall+0xd8>
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	b29c      	uxth	r4, r3
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <USB_EPClearStall+0x124>)
 80041d6:	4323      	orrs	r3, r4
 80041d8:	b29b      	uxth	r3, r3
 80041da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	b29c      	uxth	r4, r3
 80041f4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80041f8:	b29c      	uxth	r4, r3
 80041fa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80041fe:	b29c      	uxth	r4, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <USB_EPClearStall+0x120>)
 800420c:	4323      	orrs	r3, r4
 800420e:	b29b      	uxth	r3, r3
 8004210:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bc90      	pop	{r4, r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	ffff80c0 	.word	0xffff80c0
 8004224:	ffff8080 	.word	0xffff8080
 8004228:	ffffc080 	.word	0xffffc080

0800422c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004288:	b29b      	uxth	r3, r3
 800428a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b08d      	sub	sp, #52	; 0x34
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	4611      	mov	r1, r2
 80042ba:	461a      	mov	r2, r3
 80042bc:	460b      	mov	r3, r1
 80042be:	80fb      	strh	r3, [r7, #6]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80042c4:	88bb      	ldrh	r3, [r7, #4]
 80042c6:	3301      	adds	r3, #1
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	005a      	lsls	r2, r3, #1
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	e01e      	b.n	8004326 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	3301      	adds	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	b29a      	uxth	r2, r3
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	3302      	adds	r3, #2
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	3302      	adds	r3, #2
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	3301      	adds	r3, #1
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	3b01      	subs	r3, #1
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1dd      	bne.n	80042e8 <USB_WritePMA+0x3a>
  }
}
 800432c:	bf00      	nop
 800432e:	3734      	adds	r7, #52	; 0x34
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004336:	b480      	push	{r7}
 8004338:	b08b      	sub	sp, #44	; 0x2c
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	4611      	mov	r1, r2
 8004342:	461a      	mov	r2, r3
 8004344:	460b      	mov	r3, r1
 8004346:	80fb      	strh	r3, [r7, #6]
 8004348:	4613      	mov	r3, r2
 800434a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800434c:	88bb      	ldrh	r3, [r7, #4]
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	005a      	lsls	r2, r3, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004368:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	e01b      	b.n	80043a8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	3302      	adds	r3, #2
 800437c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	b2da      	uxtb	r2, r3
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3301      	adds	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	3302      	adds	r3, #2
 80043a0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	3b01      	subs	r3, #1
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e0      	bne.n	8004370 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80043ae:	88bb      	ldrh	r3, [r7, #4]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	701a      	strb	r2, [r3, #0]
  }
}
 80043ca:	bf00      	nop
 80043cc:	372c      	adds	r7, #44	; 0x2c
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80043e4:	2302      	movs	r3, #2
 80043e6:	2203      	movs	r2, #3
 80043e8:	2181      	movs	r1, #129	; 0x81
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 ffbd 	bl	800636a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80043f6:	2302      	movs	r3, #2
 80043f8:	2203      	movs	r2, #3
 80043fa:	2101      	movs	r1, #1
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f001 ffb4 	bl	800636a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800440a:	2018      	movs	r0, #24
 800440c:	f002 f8ba 	bl	8006584 <USBD_static_malloc>
 8004410:	4602      	mov	r2, r0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
 8004426:	e011      	b.n	800444c <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800442e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	2302      	movs	r3, #2
 8004444:	2101      	movs	r1, #1
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f002 f879 	bl	800653e <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004462:	2181      	movs	r1, #129	; 0x81
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f001 ffa6 	bl	80063b6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004470:	2101      	movs	r1, #1
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f001 ff9f 	bl	80063b6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800449a:	4618      	mov	r0, r3
 800449c:	f002 f87e 	bl	800659c <USBD_static_free>
    pdev->pClassData = NULL;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044c4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d051      	beq.n	8004586 <USBD_CUSTOM_HID_Setup+0xd2>
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	f040 80d8 	bne.w	8004698 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	3b02      	subs	r3, #2
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d841      	bhi.n	8004576 <USBD_CUSTOM_HID_Setup+0xc2>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <USBD_CUSTOM_HID_Setup+0x44>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	08004551 	.word	0x08004551
 80044fc:	0800452f 	.word	0x0800452f
 8004500:	08004577 	.word	0x08004577
 8004504:	08004577 	.word	0x08004577
 8004508:	08004577 	.word	0x08004577
 800450c:	08004577 	.word	0x08004577
 8004510:	08004577 	.word	0x08004577
 8004514:	08004561 	.word	0x08004561
 8004518:	0800453f 	.word	0x0800453f
 800451c:	08004521 	.word	0x08004521
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	885b      	ldrh	r3, [r3, #2]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]
          break;
 800452c:	e02a      	b.n	8004584 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	3304      	adds	r3, #4
 8004532:	2201      	movs	r2, #1
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 f98e 	bl	8005858 <USBD_CtlSendData>
          break;
 800453c:	e022      	b.n	8004584 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	885b      	ldrh	r3, [r3, #2]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	b29b      	uxth	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	609a      	str	r2, [r3, #8]
          break;
 800454e:	e019      	b.n	8004584 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3308      	adds	r3, #8
 8004554:	2201      	movs	r2, #1
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f001 f97d 	bl	8005858 <USBD_CtlSendData>
          break;
 800455e:	e011      	b.n	8004584 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2201      	movs	r2, #1
 8004564:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004566:	6939      	ldr	r1, [r7, #16]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	88db      	ldrh	r3, [r3, #6]
 800456c:	461a      	mov	r2, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 f9a0 	bl	80058b4 <USBD_CtlPrepareRx>
          break;
 8004574:	e006      	b.n	8004584 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8004576:	6839      	ldr	r1, [r7, #0]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 f903 	bl	8005784 <USBD_CtlError>
          ret = USBD_FAIL;
 800457e:	2302      	movs	r3, #2
 8004580:	75fb      	strb	r3, [r7, #23]
          break;
 8004582:	bf00      	nop
      }
      break;
 8004584:	e08f      	b.n	80046a6 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	2b0b      	cmp	r3, #11
 800458c:	d87c      	bhi.n	8004688 <USBD_CUSTOM_HID_Setup+0x1d4>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c5 	.word	0x080045c5
 8004598:	08004689 	.word	0x08004689
 800459c:	08004689 	.word	0x08004689
 80045a0:	08004689 	.word	0x08004689
 80045a4:	08004689 	.word	0x08004689
 80045a8:	08004689 	.word	0x08004689
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	08004689 	.word	0x08004689
 80045b4:	08004689 	.word	0x08004689
 80045b8:	08004689 	.word	0x08004689
 80045bc:	0800463b 	.word	0x0800463b
 80045c0:	08004663 	.word	0x08004663
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d107      	bne.n	80045de <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80045ce:	f107 030e 	add.w	r3, r7, #14
 80045d2:	2202      	movs	r2, #2
 80045d4:	4619      	mov	r1, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f001 f93e 	bl	8005858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80045dc:	e05b      	b.n	8004696 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80045de:	6839      	ldr	r1, [r7, #0]
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f001 f8cf 	bl	8005784 <USBD_CtlError>
            ret = USBD_FAIL;
 80045e6:	2302      	movs	r3, #2
 80045e8:	75fb      	strb	r3, [r7, #23]
          break;
 80045ea:	e054      	b.n	8004696 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	885b      	ldrh	r3, [r3, #2]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b22      	cmp	r3, #34	; 0x22
 80045f6:	d10b      	bne.n	8004610 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	88db      	ldrh	r3, [r3, #6]
 80045fc:	2b21      	cmp	r3, #33	; 0x21
 80045fe:	bf28      	it	cs
 8004600:	2321      	movcs	r3, #33	; 0x21
 8004602:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e00d      	b.n	800462c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	885b      	ldrh	r3, [r3, #2]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b21      	cmp	r3, #33	; 0x21
 800461a:	d107      	bne.n	800462c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800461e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	88db      	ldrh	r3, [r3, #6]
 8004624:	2b09      	cmp	r3, #9
 8004626:	bf28      	it	cs
 8004628:	2309      	movcs	r3, #9
 800462a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800462c:	8bfb      	ldrh	r3, [r7, #30]
 800462e:	461a      	mov	r2, r3
 8004630:	69b9      	ldr	r1, [r7, #24]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 f910 	bl	8005858 <USBD_CtlSendData>
          break;
 8004638:	e02d      	b.n	8004696 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004640:	2b03      	cmp	r3, #3
 8004642:	d107      	bne.n	8004654 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	330c      	adds	r3, #12
 8004648:	2201      	movs	r2, #1
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f001 f903 	bl	8005858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004652:	e020      	b.n	8004696 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f001 f894 	bl	8005784 <USBD_CtlError>
            ret = USBD_FAIL;
 800465c:	2302      	movs	r3, #2
 800465e:	75fb      	strb	r3, [r7, #23]
          break;
 8004660:	e019      	b.n	8004696 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004668:	2b03      	cmp	r3, #3
 800466a:	d106      	bne.n	800467a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	885b      	ldrh	r3, [r3, #2]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004678:	e00d      	b.n	8004696 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800467a:	6839      	ldr	r1, [r7, #0]
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 f881 	bl	8005784 <USBD_CtlError>
            ret = USBD_FAIL;
 8004682:	2302      	movs	r3, #2
 8004684:	75fb      	strb	r3, [r7, #23]
          break;
 8004686:	e006      	b.n	8004696 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f001 f87a 	bl	8005784 <USBD_CtlError>
          ret = USBD_FAIL;
 8004690:	2302      	movs	r3, #2
 8004692:	75fb      	strb	r3, [r7, #23]
          break;
 8004694:	bf00      	nop
      }
      break;
 8004696:	e006      	b.n	80046a6 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 f872 	bl	8005784 <USBD_CtlError>
      ret = USBD_FAIL;
 80046a0:	2302      	movs	r3, #2
 80046a2:	75fb      	strb	r3, [r7, #23]
      break;
 80046a4:	bf00      	nop
  }
  return ret;
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	200000c4 	.word	0x200000c4

080046b4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046c8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d10f      	bne.n	80046f4 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	7d1b      	ldrb	r3, [r3, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2201      	movs	r2, #1
 80046e0:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	2181      	movs	r1, #129	; 0x81
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f001 ff05 	bl	80064f8 <USBD_LL_Transmit>
 80046ee:	e001      	b.n	80046f4 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2229      	movs	r2, #41	; 0x29
 800470c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800470e:	4b03      	ldr	r3, [pc, #12]	; (800471c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000040 	.word	0x20000040

08004720 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2229      	movs	r2, #41	; 0x29
 800472c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000006c 	.word	0x2000006c

08004740 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2229      	movs	r2, #41	; 0x29
 800474c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800474e:	4b03      	ldr	r3, [pc, #12]	; (800475c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000098 	.word	0x20000098

08004760 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004772:	2200      	movs	r2, #0
 8004774:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr

08004782 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004794:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	7810      	ldrb	r0, [r2, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	7852      	ldrb	r2, [r2, #1]
 80047a6:	4611      	mov	r1, r2
 80047a8:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	2302      	movs	r3, #2
 80047ae:	2101      	movs	r1, #1
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f001 fec4 	bl	800653e <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ce:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d10c      	bne.n	80047f2 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	7810      	ldrb	r0, [r2, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	7852      	ldrb	r2, [r2, #1]
 80047e8:	4611      	mov	r1, r2
 80047ea:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	220a      	movs	r2, #10
 8004808:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800480a:	4b03      	ldr	r3, [pc, #12]	; (8004818 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	200000d0 	.word	0x200000d0

0800481c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004826:	2302      	movs	r3, #2
 8004828:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800485c:	2302      	movs	r3, #2
 800485e:	e01a      	b.n	8004896 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	79fa      	ldrb	r2, [r7, #7]
 800488c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f001 fd00 	bl	8006294 <USBD_LL_Init>

  return USBD_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d006      	beq.n	80048c0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	e001      	b.n	80048c4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80048c0:	2302      	movs	r3, #2
 80048c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f001 fd2b 	bl	8006334 <USBD_LL_Start>

  return USBD_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004908:	2302      	movs	r3, #2
 800490a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	4611      	mov	r1, r2
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	4611      	mov	r1, r2
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3

  return USBD_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 feca 	bl	800570c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2b01      	cmp	r3, #1
 800499a:	d00c      	beq.n	80049b6 <USBD_LL_SetupStage+0x56>
 800499c:	2b01      	cmp	r3, #1
 800499e:	d302      	bcc.n	80049a6 <USBD_LL_SetupStage+0x46>
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d010      	beq.n	80049c6 <USBD_LL_SetupStage+0x66>
 80049a4:	e017      	b.n	80049d6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f9ca 	bl	8004d48 <USBD_StdDevReq>
      break;
 80049b4:	e01a      	b.n	80049ec <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa2c 	bl	8004e1c <USBD_StdItfReq>
      break;
 80049c4:	e012      	b.n	80049ec <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa6a 	bl	8004ea8 <USBD_StdEPReq>
      break;
 80049d4:	e00a      	b.n	80049ec <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fd05 	bl	80063f4 <USBD_LL_StallEP>
      break;
 80049ea:	bf00      	nop
  }

  return USBD_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	460b      	mov	r3, r1
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d14b      	bne.n	8004aa2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004a10:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d134      	bne.n	8004a86 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d919      	bls.n	8004a5c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	1ad2      	subs	r2, r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d203      	bcs.n	8004a4a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	e002      	b.n	8004a50 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 ff4b 	bl	80058f0 <USBD_CtlContinueRx>
 8004a5a:	e038      	b.n	8004ace <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d105      	bne.n	8004a7e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 ff48 	bl	8005914 <USBD_CtlSendStatus>
 8004a84:	e023      	b.n	8004ace <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d11e      	bne.n	8004ace <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004a98:	2100      	movs	r1, #0
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f001 fcaa 	bl	80063f4 <USBD_LL_StallEP>
 8004aa0:	e015      	b.n	8004ace <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d108      	bne.n	8004aca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	7afa      	ldrb	r2, [r7, #11]
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	4798      	blx	r3
 8004ac8:	e001      	b.n	8004ace <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004aca:	2302      	movs	r3, #2
 8004acc:	e000      	b.n	8004ad0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004ae6:	7afb      	ldrb	r3, [r7, #11]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d17f      	bne.n	8004bec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3314      	adds	r3, #20
 8004af0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d15c      	bne.n	8004bb6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d915      	bls.n	8004b34 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	1ad2      	subs	r2, r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 feb5 	bl	8005890 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b26:	2300      	movs	r3, #0
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f001 fd06 	bl	800653e <USBD_LL_PrepareReceive>
 8004b32:	e04e      	b.n	8004bd2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	6912      	ldr	r2, [r2, #16]
 8004b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b40:	fb02 f201 	mul.w	r2, r2, r1
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11c      	bne.n	8004b84 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d316      	bcc.n	8004b84 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d20f      	bcs.n	8004b84 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fe91 	bl	8005890 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b76:	2300      	movs	r3, #0
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f001 fcde 	bl	800653e <USBD_LL_PrepareReceive>
 8004b82:	e026      	b.n	8004bd2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d105      	bne.n	8004ba6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f001 fc23 	bl	80063f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fec3 	bl	800593a <USBD_CtlReceiveStatus>
 8004bb4:	e00d      	b.n	8004bd2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d004      	beq.n	8004bca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f001 fc11 	bl	80063f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d11d      	bne.n	8004c18 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff fe83 	bl	80048e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004bea:	e015      	b.n	8004c18 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d108      	bne.n	8004c14 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	7afa      	ldrb	r2, [r7, #11]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	4798      	blx	r3
 8004c12:	e001      	b.n	8004c18 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004c14:	2302      	movs	r3, #2
 8004c16:	e000      	b.n	8004c1a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c2a:	2340      	movs	r3, #64	; 0x40
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f001 fb9a 	bl	800636a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2240      	movs	r2, #64	; 0x40
 8004c42:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c46:	2340      	movs	r3, #64	; 0x40
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 fb8c 	bl	800636a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2240      	movs	r2, #64	; 0x40
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6852      	ldr	r2, [r2, #4]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	4611      	mov	r1, r2
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
  }

  return USBD_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d105      	bne.n	8004d08 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d10b      	bne.n	8004d3e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d004      	beq.n	8004d6c <USBD_StdDevReq+0x24>
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d002      	beq.n	8004d6c <USBD_StdDevReq+0x24>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <USBD_StdDevReq+0x34>
 8004d6a:	e04c      	b.n	8004e06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
      break;
 8004d7a:	e049      	b.n	8004e10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	d83a      	bhi.n	8004dfa <USBD_StdDevReq+0xb2>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <USBD_StdDevReq+0x44>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004ddd 	.word	0x08004ddd
 8004d90:	08004df1 	.word	0x08004df1
 8004d94:	08004dfb 	.word	0x08004dfb
 8004d98:	08004de7 	.word	0x08004de7
 8004d9c:	08004dfb 	.word	0x08004dfb
 8004da0:	08004dbf 	.word	0x08004dbf
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dfb 	.word	0x08004dfb
 8004dac:	08004dd3 	.word	0x08004dd3
 8004db0:	08004dc9 	.word	0x08004dc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9d4 	bl	8005164 <USBD_GetDescriptor>
          break;
 8004dbc:	e022      	b.n	8004e04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004dbe:	6839      	ldr	r1, [r7, #0]
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb37 	bl	8005434 <USBD_SetAddress>
          break;
 8004dc6:	e01d      	b.n	8004e04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fb74 	bl	80054b8 <USBD_SetConfig>
          break;
 8004dd0:	e018      	b.n	8004e04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fbfd 	bl	80055d4 <USBD_GetConfig>
          break;
 8004dda:	e013      	b.n	8004e04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fc2c 	bl	800563c <USBD_GetStatus>
          break;
 8004de4:	e00e      	b.n	8004e04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fc5a 	bl	80056a2 <USBD_SetFeature>
          break;
 8004dee:	e009      	b.n	8004e04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fc69 	bl	80056ca <USBD_ClrFeature>
          break;
 8004df8:	e004      	b.n	8004e04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fcc1 	bl	8005784 <USBD_CtlError>
          break;
 8004e02:	bf00      	nop
      }
      break;
 8004e04:	e004      	b.n	8004e10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fcbb 	bl	8005784 <USBD_CtlError>
      break;
 8004e0e:	bf00      	nop
  }

  return ret;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d003      	beq.n	8004e3e <USBD_StdItfReq+0x22>
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d001      	beq.n	8004e3e <USBD_StdItfReq+0x22>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d12a      	bne.n	8004e94 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e44:	3b01      	subs	r3, #1
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d81d      	bhi.n	8004e86 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	889b      	ldrh	r3, [r3, #4]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d813      	bhi.n	8004e7c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	88db      	ldrh	r3, [r3, #6]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d110      	bne.n	8004e90 <USBD_StdItfReq+0x74>
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10d      	bne.n	8004e90 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fd4d 	bl	8005914 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004e7a:	e009      	b.n	8004e90 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fc80 	bl	8005784 <USBD_CtlError>
          break;
 8004e84:	e004      	b.n	8004e90 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fc7b 	bl	8005784 <USBD_CtlError>
          break;
 8004e8e:	e000      	b.n	8004e92 <USBD_StdItfReq+0x76>
          break;
 8004e90:	bf00      	nop
      }
      break;
 8004e92:	e004      	b.n	8004e9e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fc74 	bl	8005784 <USBD_CtlError>
      break;
 8004e9c:	bf00      	nop
  }

  return USBD_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	889b      	ldrh	r3, [r3, #4]
 8004eba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d004      	beq.n	8004ed2 <USBD_StdEPReq+0x2a>
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d002      	beq.n	8004ed2 <USBD_StdEPReq+0x2a>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <USBD_StdEPReq+0x3a>
 8004ed0:	e13d      	b.n	800514e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
      break;
 8004ee0:	e13a      	b.n	8005158 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d10a      	bne.n	8004f04 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
 8004efc:	4603      	mov	r3, r0
 8004efe:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	e12a      	b.n	800515a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d03e      	beq.n	8004f8a <USBD_StdEPReq+0xe2>
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d002      	beq.n	8004f16 <USBD_StdEPReq+0x6e>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d070      	beq.n	8004ff6 <USBD_StdEPReq+0x14e>
 8004f14:	e115      	b.n	8005142 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d002      	beq.n	8004f26 <USBD_StdEPReq+0x7e>
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d015      	beq.n	8004f50 <USBD_StdEPReq+0xa8>
 8004f24:	e02b      	b.n	8004f7e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <USBD_StdEPReq+0x9e>
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d009      	beq.n	8004f46 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004f32:	7bbb      	ldrb	r3, [r7, #14]
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fa5c 	bl	80063f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fa58 	bl	80063f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f44:	e020      	b.n	8004f88 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fc1b 	bl	8005784 <USBD_CtlError>
              break;
 8004f4e:	e01b      	b.n	8004f88 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	885b      	ldrh	r3, [r3, #2]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10e      	bne.n	8004f76 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004f58:	7bbb      	ldrb	r3, [r7, #14]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <USBD_StdEPReq+0xce>
 8004f5e:	7bbb      	ldrb	r3, [r7, #14]
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d008      	beq.n	8004f76 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	88db      	ldrh	r3, [r3, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 fa3f 	bl	80063f4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fccc 	bl	8005914 <USBD_CtlSendStatus>

              break;
 8004f7c:	e004      	b.n	8004f88 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fbff 	bl	8005784 <USBD_CtlError>
              break;
 8004f86:	bf00      	nop
          }
          break;
 8004f88:	e0e0      	b.n	800514c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d002      	beq.n	8004f9a <USBD_StdEPReq+0xf2>
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d015      	beq.n	8004fc4 <USBD_StdEPReq+0x11c>
 8004f98:	e026      	b.n	8004fe8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <USBD_StdEPReq+0x112>
 8004fa0:	7bbb      	ldrb	r3, [r7, #14]
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d009      	beq.n	8004fba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004fa6:	7bbb      	ldrb	r3, [r7, #14]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 fa22 	bl	80063f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004fb0:	2180      	movs	r1, #128	; 0x80
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 fa1e 	bl	80063f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004fb8:	e01c      	b.n	8004ff4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fbe1 	bl	8005784 <USBD_CtlError>
              break;
 8004fc2:	e017      	b.n	8004ff4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	885b      	ldrh	r3, [r3, #2]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d112      	bne.n	8004ff2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004fd6:	7bbb      	ldrb	r3, [r7, #14]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 fa29 	bl	8006432 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fc97 	bl	8005914 <USBD_CtlSendStatus>
              }
              break;
 8004fe6:	e004      	b.n	8004ff2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fbca 	bl	8005784 <USBD_CtlError>
              break;
 8004ff0:	e000      	b.n	8004ff4 <USBD_StdEPReq+0x14c>
              break;
 8004ff2:	bf00      	nop
          }
          break;
 8004ff4:	e0aa      	b.n	800514c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d002      	beq.n	8005006 <USBD_StdEPReq+0x15e>
 8005000:	2b03      	cmp	r3, #3
 8005002:	d032      	beq.n	800506a <USBD_StdEPReq+0x1c2>
 8005004:	e097      	b.n	8005136 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <USBD_StdEPReq+0x174>
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d004      	beq.n	800501c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fbb5 	bl	8005784 <USBD_CtlError>
                break;
 800501a:	e091      	b.n	8005140 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800501c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005020:	2b00      	cmp	r3, #0
 8005022:	da0b      	bge.n	800503c <USBD_StdEPReq+0x194>
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	3310      	adds	r3, #16
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4413      	add	r3, r2
 8005038:	3304      	adds	r3, #4
 800503a:	e00b      	b.n	8005054 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800503c:	7bbb      	ldrb	r3, [r7, #14]
 800503e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2202      	movs	r2, #2
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fbf8 	bl	8005858 <USBD_CtlSendData>
              break;
 8005068:	e06a      	b.n	8005140 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800506a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800506e:	2b00      	cmp	r3, #0
 8005070:	da11      	bge.n	8005096 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005072:	7bbb      	ldrb	r3, [r7, #14]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3318      	adds	r3, #24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d117      	bne.n	80050bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fb78 	bl	8005784 <USBD_CtlError>
                  break;
 8005094:	e054      	b.n	8005140 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005096:	7bbb      	ldrb	r3, [r7, #14]
 8005098:	f003 020f 	and.w	r2, r3, #15
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb65 	bl	8005784 <USBD_CtlError>
                  break;
 80050ba:	e041      	b.n	8005140 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da0b      	bge.n	80050dc <USBD_StdEPReq+0x234>
 80050c4:	7bbb      	ldrb	r3, [r7, #14]
 80050c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3310      	adds	r3, #16
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	3304      	adds	r3, #4
 80050da:	e00b      	b.n	80050f4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050dc:	7bbb      	ldrb	r3, [r7, #14]
 80050de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	3304      	adds	r3, #4
 80050f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80050f6:	7bbb      	ldrb	r3, [r7, #14]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <USBD_StdEPReq+0x25a>
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b80      	cmp	r3, #128	; 0x80
 8005100:	d103      	bne.n	800510a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e00e      	b.n	8005128 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800510a:	7bbb      	ldrb	r3, [r7, #14]
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 f9ae 	bl	8006470 <USBD_LL_IsStallEP>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e002      	b.n	8005128 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2202      	movs	r2, #2
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fb92 	bl	8005858 <USBD_CtlSendData>
              break;
 8005134:	e004      	b.n	8005140 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005136:	6839      	ldr	r1, [r7, #0]
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fb23 	bl	8005784 <USBD_CtlError>
              break;
 800513e:	bf00      	nop
          }
          break;
 8005140:	e004      	b.n	800514c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fb1d 	bl	8005784 <USBD_CtlError>
          break;
 800514a:	bf00      	nop
      }
      break;
 800514c:	e004      	b.n	8005158 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fb17 	bl	8005784 <USBD_CtlError>
      break;
 8005156:	bf00      	nop
  }

  return ret;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	885b      	ldrh	r3, [r3, #2]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	2b06      	cmp	r3, #6
 8005186:	f200 8128 	bhi.w	80053da <USBD_GetDescriptor+0x276>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <USBD_GetDescriptor+0x2c>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051c5 	.word	0x080051c5
 8005198:	08005205 	.word	0x08005205
 800519c:	080053db 	.word	0x080053db
 80051a0:	080053db 	.word	0x080053db
 80051a4:	0800537b 	.word	0x0800537b
 80051a8:	080053a7 	.word	0x080053a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	7c12      	ldrb	r2, [r2, #16]
 80051b8:	f107 0108 	add.w	r1, r7, #8
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
 80051c0:	60f8      	str	r0, [r7, #12]
      break;
 80051c2:	e112      	b.n	80053ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7c1b      	ldrb	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10d      	bne.n	80051e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	f107 0208 	add.w	r2, r7, #8
 80051d8:	4610      	mov	r0, r2
 80051da:	4798      	blx	r3
 80051dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3301      	adds	r3, #1
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80051e6:	e100      	b.n	80053ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	f107 0208 	add.w	r2, r7, #8
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
 80051f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	2202      	movs	r2, #2
 8005200:	701a      	strb	r2, [r3, #0]
      break;
 8005202:	e0f2      	b.n	80053ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	885b      	ldrh	r3, [r3, #2]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b05      	cmp	r3, #5
 800520c:	f200 80ac 	bhi.w	8005368 <USBD_GetDescriptor+0x204>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <USBD_GetDescriptor+0xb4>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005231 	.word	0x08005231
 800521c:	08005265 	.word	0x08005265
 8005220:	08005299 	.word	0x08005299
 8005224:	080052cd 	.word	0x080052cd
 8005228:	08005301 	.word	0x08005301
 800522c:	08005335 	.word	0x08005335
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	7c12      	ldrb	r2, [r2, #16]
 8005248:	f107 0108 	add.w	r1, r7, #8
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
 8005250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005252:	e091      	b.n	8005378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa94 	bl	8005784 <USBD_CtlError>
            err++;
 800525c:	7afb      	ldrb	r3, [r7, #11]
 800525e:	3301      	adds	r3, #1
 8005260:	72fb      	strb	r3, [r7, #11]
          break;
 8005262:	e089      	b.n	8005378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	7c12      	ldrb	r2, [r2, #16]
 800527c:	f107 0108 	add.w	r1, r7, #8
 8005280:	4610      	mov	r0, r2
 8005282:	4798      	blx	r3
 8005284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005286:	e077      	b.n	8005378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa7a 	bl	8005784 <USBD_CtlError>
            err++;
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	3301      	adds	r3, #1
 8005294:	72fb      	strb	r3, [r7, #11]
          break;
 8005296:	e06f      	b.n	8005378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	7c12      	ldrb	r2, [r2, #16]
 80052b0:	f107 0108 	add.w	r1, r7, #8
 80052b4:	4610      	mov	r0, r2
 80052b6:	4798      	blx	r3
 80052b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ba:	e05d      	b.n	8005378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa60 	bl	8005784 <USBD_CtlError>
            err++;
 80052c4:	7afb      	ldrb	r3, [r7, #11]
 80052c6:	3301      	adds	r3, #1
 80052c8:	72fb      	strb	r3, [r7, #11]
          break;
 80052ca:	e055      	b.n	8005378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	7c12      	ldrb	r2, [r2, #16]
 80052e4:	f107 0108 	add.w	r1, r7, #8
 80052e8:	4610      	mov	r0, r2
 80052ea:	4798      	blx	r3
 80052ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ee:	e043      	b.n	8005378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa46 	bl	8005784 <USBD_CtlError>
            err++;
 80052f8:	7afb      	ldrb	r3, [r7, #11]
 80052fa:	3301      	adds	r3, #1
 80052fc:	72fb      	strb	r3, [r7, #11]
          break;
 80052fe:	e03b      	b.n	8005378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	7c12      	ldrb	r2, [r2, #16]
 8005318:	f107 0108 	add.w	r1, r7, #8
 800531c:	4610      	mov	r0, r2
 800531e:	4798      	blx	r3
 8005320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005322:	e029      	b.n	8005378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa2c 	bl	8005784 <USBD_CtlError>
            err++;
 800532c:	7afb      	ldrb	r3, [r7, #11]
 800532e:	3301      	adds	r3, #1
 8005330:	72fb      	strb	r3, [r7, #11]
          break;
 8005332:	e021      	b.n	8005378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	7c12      	ldrb	r2, [r2, #16]
 800534c:	f107 0108 	add.w	r1, r7, #8
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
 8005354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005356:	e00f      	b.n	8005378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa12 	bl	8005784 <USBD_CtlError>
            err++;
 8005360:	7afb      	ldrb	r3, [r7, #11]
 8005362:	3301      	adds	r3, #1
 8005364:	72fb      	strb	r3, [r7, #11]
          break;
 8005366:	e007      	b.n	8005378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa0a 	bl	8005784 <USBD_CtlError>
          err++;
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	3301      	adds	r3, #1
 8005374:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005376:	e038      	b.n	80053ea <USBD_GetDescriptor+0x286>
 8005378:	e037      	b.n	80053ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7c1b      	ldrb	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538a:	f107 0208 	add.w	r2, r7, #8
 800538e:	4610      	mov	r0, r2
 8005390:	4798      	blx	r3
 8005392:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005394:	e029      	b.n	80053ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f9f3 	bl	8005784 <USBD_CtlError>
        err++;
 800539e:	7afb      	ldrb	r3, [r7, #11]
 80053a0:	3301      	adds	r3, #1
 80053a2:	72fb      	strb	r3, [r7, #11]
      break;
 80053a4:	e021      	b.n	80053ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7c1b      	ldrb	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10d      	bne.n	80053ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	f107 0208 	add.w	r2, r7, #8
 80053ba:	4610      	mov	r0, r2
 80053bc:	4798      	blx	r3
 80053be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	2207      	movs	r2, #7
 80053c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053c8:	e00f      	b.n	80053ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9d9 	bl	8005784 <USBD_CtlError>
        err++;
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	3301      	adds	r3, #1
 80053d6:	72fb      	strb	r3, [r7, #11]
      break;
 80053d8:	e007      	b.n	80053ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f9d1 	bl	8005784 <USBD_CtlError>
      err++;
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	3301      	adds	r3, #1
 80053e6:	72fb      	strb	r3, [r7, #11]
      break;
 80053e8:	bf00      	nop
  }

  if (err != 0U)
 80053ea:	7afb      	ldrb	r3, [r7, #11]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11c      	bne.n	800542a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80053f0:	893b      	ldrh	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <USBD_GetDescriptor+0x2b6>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00d      	beq.n	800541a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	88da      	ldrh	r2, [r3, #6]
 8005402:	893b      	ldrh	r3, [r7, #8]
 8005404:	4293      	cmp	r3, r2
 8005406:	bf28      	it	cs
 8005408:	4613      	movcs	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800540e:	893b      	ldrh	r3, [r7, #8]
 8005410:	461a      	mov	r2, r3
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa1f 	bl	8005858 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	88db      	ldrh	r3, [r3, #6]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fa76 	bl	8005914 <USBD_CtlSendStatus>
 8005428:	e000      	b.n	800542c <USBD_GetDescriptor+0x2c8>
    return;
 800542a:	bf00      	nop
    }
  }
}
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop

08005434 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	889b      	ldrh	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d130      	bne.n	80054a8 <USBD_SetAddress+0x74>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	88db      	ldrh	r3, [r3, #6]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d12c      	bne.n	80054a8 <USBD_SetAddress+0x74>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	885b      	ldrh	r3, [r3, #2]
 8005452:	2b7f      	cmp	r3, #127	; 0x7f
 8005454:	d828      	bhi.n	80054a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	885b      	ldrh	r3, [r3, #2]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005468:	2b03      	cmp	r3, #3
 800546a:	d104      	bne.n	8005476 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f988 	bl	8005784 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005474:	e01c      	b.n	80054b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 f819 	bl	80064ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fa43 	bl	8005914 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800549c:	e008      	b.n	80054b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a6:	e003      	b.n	80054b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f96a 	bl	8005784 <USBD_CtlError>
  }
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	885b      	ldrh	r3, [r3, #2]
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <USBD_SetConfig+0x118>)
 80054ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80054cc:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <USBD_SetConfig+0x118>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d904      	bls.n	80054de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f954 	bl	8005784 <USBD_CtlError>
 80054dc:	e075      	b.n	80055ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d002      	beq.n	80054ee <USBD_SetConfig+0x36>
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d023      	beq.n	8005534 <USBD_SetConfig+0x7c>
 80054ec:	e062      	b.n	80055b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80054ee:	4b38      	ldr	r3, [pc, #224]	; (80055d0 <USBD_SetConfig+0x118>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01a      	beq.n	800552c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80054f6:	4b36      	ldr	r3, [pc, #216]	; (80055d0 <USBD_SetConfig+0x118>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2203      	movs	r2, #3
 8005504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005508:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <USBD_SetConfig+0x118>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff f9f4 	bl	80048fc <USBD_SetClassConfig>
 8005514:	4603      	mov	r3, r0
 8005516:	2b02      	cmp	r3, #2
 8005518:	d104      	bne.n	8005524 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f931 	bl	8005784 <USBD_CtlError>
            return;
 8005522:	e052      	b.n	80055ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f9f5 	bl	8005914 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800552a:	e04e      	b.n	80055ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f9f1 	bl	8005914 <USBD_CtlSendStatus>
        break;
 8005532:	e04a      	b.n	80055ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <USBD_SetConfig+0x118>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d112      	bne.n	8005562 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <USBD_SetConfig+0x118>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <USBD_SetConfig+0x118>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff f9f0 	bl	800493a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9da 	bl	8005914 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005560:	e033      	b.n	80055ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <USBD_SetConfig+0x118>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d01d      	beq.n	80055ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff f9de 	bl	800493a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <USBD_SetConfig+0x118>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005588:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <USBD_SetConfig+0x118>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff f9b4 	bl	80048fc <USBD_SetClassConfig>
 8005594:	4603      	mov	r3, r0
 8005596:	2b02      	cmp	r3, #2
 8005598:	d104      	bne.n	80055a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8f1 	bl	8005784 <USBD_CtlError>
            return;
 80055a2:	e012      	b.n	80055ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9b5 	bl	8005914 <USBD_CtlSendStatus>
        break;
 80055aa:	e00e      	b.n	80055ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f9b1 	bl	8005914 <USBD_CtlSendStatus>
        break;
 80055b2:	e00a      	b.n	80055ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8e4 	bl	8005784 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <USBD_SetConfig+0x118>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff f9b9 	bl	800493a <USBD_ClrClassConfig>
        break;
 80055c8:	bf00      	nop
    }
  }
}
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000180 	.word	0x20000180

080055d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d004      	beq.n	80055f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f8cb 	bl	8005784 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80055ee:	e021      	b.n	8005634 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	db17      	blt.n	800562a <USBD_GetConfig+0x56>
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	dd02      	ble.n	8005604 <USBD_GetConfig+0x30>
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d00b      	beq.n	800561a <USBD_GetConfig+0x46>
 8005602:	e012      	b.n	800562a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3308      	adds	r3, #8
 800560e:	2201      	movs	r2, #1
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f920 	bl	8005858 <USBD_CtlSendData>
        break;
 8005618:	e00c      	b.n	8005634 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	2201      	movs	r2, #1
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f918 	bl	8005858 <USBD_CtlSendData>
        break;
 8005628:	e004      	b.n	8005634 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8a9 	bl	8005784 <USBD_CtlError>
        break;
 8005632:	bf00      	nop
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800564c:	3b01      	subs	r3, #1
 800564e:	2b02      	cmp	r3, #2
 8005650:	d81e      	bhi.n	8005690 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	88db      	ldrh	r3, [r3, #6]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d004      	beq.n	8005664 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f891 	bl	8005784 <USBD_CtlError>
        break;
 8005662:	e01a      	b.n	800569a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f043 0202 	orr.w	r2, r3, #2
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	330c      	adds	r3, #12
 8005684:	2202      	movs	r2, #2
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8e5 	bl	8005858 <USBD_CtlSendData>
      break;
 800568e:	e004      	b.n	800569a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f876 	bl	8005784 <USBD_CtlError>
      break;
 8005698:	bf00      	nop
  }
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	885b      	ldrh	r3, [r3, #2]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d106      	bne.n	80056c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f929 	bl	8005914 <USBD_CtlSendStatus>
  }
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056da:	3b01      	subs	r3, #1
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d80b      	bhi.n	80056f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	885b      	ldrh	r3, [r3, #2]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d10c      	bne.n	8005702 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f90f 	bl	8005914 <USBD_CtlSendStatus>
      }
      break;
 80056f6:	e004      	b.n	8005702 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f842 	bl	8005784 <USBD_CtlError>
      break;
 8005700:	e000      	b.n	8005704 <USBD_ClrFeature+0x3a>
      break;
 8005702:	bf00      	nop
  }
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	785a      	ldrb	r2, [r3, #1]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	3302      	adds	r3, #2
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b29a      	uxth	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	3303      	adds	r3, #3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	b29b      	uxth	r3, r3
 800573a:	4413      	add	r3, r2
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	3304      	adds	r3, #4
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b29a      	uxth	r2, r3
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	3305      	adds	r3, #5
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	b29b      	uxth	r3, r3
 8005756:	4413      	add	r3, r2
 8005758:	b29a      	uxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	3306      	adds	r3, #6
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	3307      	adds	r3, #7
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	b29b      	uxth	r3, r3
 8005772:	4413      	add	r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	80da      	strh	r2, [r3, #6]

}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fe2f 	bl	80063f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005796:	2100      	movs	r1, #0
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fe2b 	bl	80063f4 <USBD_LL_StallEP>
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d032      	beq.n	8005822 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f834 	bl	800582a <USBD_GetLen>
 80057c2:	4603      	mov	r3, r0
 80057c4:	3301      	adds	r3, #1
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	75fa      	strb	r2, [r7, #23]
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4413      	add	r3, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	7812      	ldrb	r2, [r2, #0]
 80057e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	75fa      	strb	r2, [r7, #23]
 80057e8:	461a      	mov	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4413      	add	r3, r2
 80057ee:	2203      	movs	r2, #3
 80057f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80057f2:	e012      	b.n	800581a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	60fa      	str	r2, [r7, #12]
 80057fa:	7dfa      	ldrb	r2, [r7, #23]
 80057fc:	1c51      	adds	r1, r2, #1
 80057fe:	75f9      	strb	r1, [r7, #23]
 8005800:	4611      	mov	r1, r2
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	440a      	add	r2, r1
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	75fa      	strb	r2, [r7, #23]
 8005810:	461a      	mov	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4413      	add	r3, r2
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e8      	bne.n	80057f4 <USBD_GetString+0x4e>
    }
  }
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005836:	e005      	b.n	8005844 <USBD_GetLen+0x1a>
  {
    len++;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	3301      	adds	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3301      	adds	r3, #1
 8005842:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f5      	bne.n	8005838 <USBD_GetLen+0xe>
  }

  return len;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2202      	movs	r2, #2
 800586a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	2100      	movs	r1, #0
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 fe39 	bl	80064f8 <USBD_LL_Transmit>

  return USBD_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	2100      	movs	r1, #0
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fe27 	bl	80064f8 <USBD_LL_Transmit>

  return USBD_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2203      	movs	r2, #3
 80058c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	2100      	movs	r1, #0
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fe2c 	bl	800653e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	2100      	movs	r1, #0
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fe1a 	bl	800653e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2204      	movs	r2, #4
 8005920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005924:	2300      	movs	r3, #0
 8005926:	2200      	movs	r2, #0
 8005928:	2100      	movs	r1, #0
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fde4 	bl	80064f8 <USBD_LL_Transmit>

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2205      	movs	r2, #5
 8005946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800594a:	2300      	movs	r3, #0
 800594c:	2200      	movs	r2, #0
 800594e:	2100      	movs	r1, #0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fdf4 	bl	800653e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <adc_to_percent>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t adc_to_percent(uint16_t adc_value)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	80fb      	strh	r3, [r7, #6]
	return round((adc_value / 4095.0) * 100);
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fa fd41 	bl	80003f4 <__aeabi_i2d>
 8005972:	a311      	add	r3, pc, #68	; (adr r3, 80059b8 <adc_to_percent+0x58>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f7fa fed0 	bl	800071c <__aeabi_ddiv>
 800597c:	4603      	mov	r3, r0
 800597e:	460c      	mov	r4, r1
 8005980:	4618      	mov	r0, r3
 8005982:	4621      	mov	r1, r4
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <adc_to_percent+0x60>)
 800598a:	f7fa fd9d 	bl	80004c8 <__aeabi_dmul>
 800598e:	4603      	mov	r3, r0
 8005990:	460c      	mov	r4, r1
 8005992:	4618      	mov	r0, r3
 8005994:	4621      	mov	r1, r4
 8005996:	f000 ffbd 	bl	8006914 <round>
 800599a:	4603      	mov	r3, r0
 800599c:	460c      	mov	r4, r1
 800599e:	4618      	mov	r0, r3
 80059a0:	4621      	mov	r1, r4
 80059a2:	f7fa ffa3 	bl	80008ec <__aeabi_d2uiz>
 80059a6:	4603      	mov	r3, r0
 80059a8:	b2db      	uxtb	r3, r3
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	f3af 8000 	nop.w
 80059b8:	00000000 	.word	0x00000000
 80059bc:	40affe00 	.word	0x40affe00
 80059c0:	40590000 	.word	0x40590000
 80059c4:	00000000 	.word	0x00000000

080059c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059c8:	b590      	push	{r4, r7, lr}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059ce:	f7fa ffad 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059d2:	f000 f93f 	bl	8005c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059d6:	f000 fa07 	bl	8005de8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80059da:	f000 fb6f 	bl	80060bc <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80059de:	f000 f9e5 	bl	8005dac <MX_DMA_Init>
  MX_ADC1_Init();
 80059e2:	f000 f995 	bl	8005d10 <MX_ADC1_Init>
	  uint16_t throttle2;
	  uint16_t reverser1;
	  uint16_t reverser2;
  };

  HAL_ADC_Start_DMA(&hadc1, adcBuffer, 2);
 80059e6:	f107 0314 	add.w	r3, r7, #20
 80059ea:	2202      	movs	r2, #2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4892      	ldr	r0, [pc, #584]	; (8005c38 <main+0x270>)
 80059f0:	f7fb f8d6 	bl	8000ba0 <HAL_ADC_Start_DMA>
  uint8_t max_percent[2];
  uint8_t idle_percent[2];
  uint16_t idle_value[2];

  last_time = HAL_GetTick();
 80059f4:	f7fa fff2 	bl	80009dc <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b90      	ldr	r3, [pc, #576]	; (8005c3c <main+0x274>)
 80059fc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (calibrated)
 80059fe:	4b90      	ldr	r3, [pc, #576]	; (8005c40 <main+0x278>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8097 	beq.w	8005b36 <main+0x16e>

		  //top value is 53, bottom is 21...

		  struct throttle_report_t throttleReport;

		  throttleReport.throttle1 = (((adc_to_percent(adcBuffer[0]) - (max_percent[0] - 21)) / 22.0)) * 4095;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ffa7 	bl	8005960 <adc_to_percent>
 8005a12:	4603      	mov	r3, r0
 8005a14:	461a      	mov	r2, r3
 8005a16:	7c3b      	ldrb	r3, [r7, #16]
 8005a18:	3b15      	subs	r3, #21
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fa fce9 	bl	80003f4 <__aeabi_i2d>
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	4b87      	ldr	r3, [pc, #540]	; (8005c44 <main+0x27c>)
 8005a28:	f7fa fe78 	bl	800071c <__aeabi_ddiv>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	4618      	mov	r0, r3
 8005a32:	4621      	mov	r1, r4
 8005a34:	a37e      	add	r3, pc, #504	; (adr r3, 8005c30 <main+0x268>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f7fa fd45 	bl	80004c8 <__aeabi_dmul>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	4618      	mov	r0, r3
 8005a44:	4621      	mov	r1, r4
 8005a46:	f7fa ff51 	bl	80008ec <__aeabi_d2uiz>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	803b      	strh	r3, [r7, #0]
		  throttleReport.throttle2 = (((adc_to_percent(adcBuffer[1]) - (max_percent[1] - 22)) / 22.0)) * 4095;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff83 	bl	8005960 <adc_to_percent>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	7c7b      	ldrb	r3, [r7, #17]
 8005a60:	3b16      	subs	r3, #22
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fa fcc5 	bl	80003f4 <__aeabi_i2d>
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	4b75      	ldr	r3, [pc, #468]	; (8005c44 <main+0x27c>)
 8005a70:	f7fa fe54 	bl	800071c <__aeabi_ddiv>
 8005a74:	4603      	mov	r3, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	a36c      	add	r3, pc, #432	; (adr r3, 8005c30 <main+0x268>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fd21 	bl	80004c8 <__aeabi_dmul>
 8005a86:	4603      	mov	r3, r0
 8005a88:	460c      	mov	r4, r1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	f7fa ff2d 	bl	80008ec <__aeabi_d2uiz>
 8005a92:	4603      	mov	r3, r0
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	807b      	strh	r3, [r7, #2]
		  throttleReport.reverser1 = ((((max_percent[0] - 22) - (adc_to_percent(adcBuffer[0]))) / 12.0)) * 4095;
 8005a98:	7c3b      	ldrb	r3, [r7, #16]
 8005a9a:	f1a3 0416 	sub.w	r4, r3, #22
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff ff5c 	bl	8005960 <adc_to_percent>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	1ae3      	subs	r3, r4, r3
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fa fca1 	bl	80003f4 <__aeabi_i2d>
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	4b64      	ldr	r3, [pc, #400]	; (8005c48 <main+0x280>)
 8005ab8:	f7fa fe30 	bl	800071c <__aeabi_ddiv>
 8005abc:	4603      	mov	r3, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	a35a      	add	r3, pc, #360	; (adr r3, 8005c30 <main+0x268>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fcfd 	bl	80004c8 <__aeabi_dmul>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	f7fa ff09 	bl	80008ec <__aeabi_d2uiz>
 8005ada:	4603      	mov	r3, r0
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	80bb      	strh	r3, [r7, #4]
		  throttleReport.reverser2 = ((((max_percent[1] - 22) - (adc_to_percent(adcBuffer[1]))) / 12.0)) * 4095;
 8005ae0:	7c7b      	ldrb	r3, [r7, #17]
 8005ae2:	f1a3 0416 	sub.w	r4, r3, #22
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff ff38 	bl	8005960 <adc_to_percent>
 8005af0:	4603      	mov	r3, r0
 8005af2:	1ae3      	subs	r3, r4, r3
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fc7d 	bl	80003f4 <__aeabi_i2d>
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	4b52      	ldr	r3, [pc, #328]	; (8005c48 <main+0x280>)
 8005b00:	f7fa fe0c 	bl	800071c <__aeabi_ddiv>
 8005b04:	4603      	mov	r3, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	4618      	mov	r0, r3
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	a348      	add	r3, pc, #288	; (adr r3, 8005c30 <main+0x268>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fcd9 	bl	80004c8 <__aeabi_dmul>
 8005b16:	4603      	mov	r3, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f7fa fee5 	bl	80008ec <__aeabi_d2uiz>
 8005b22:	4603      	mov	r3, r0
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	80fb      	strh	r3, [r7, #6]

		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &throttleReport, sizeof(struct throttle_report_t));
 8005b28:	463b      	mov	r3, r7
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4847      	ldr	r0, [pc, #284]	; (8005c4c <main+0x284>)
 8005b30:	f7fe fdc0 	bl	80046b4 <USBD_CUSTOM_HID_SendReport>
 8005b34:	e763      	b.n	80059fe <main+0x36>
	  }
	  else
	  {
		  if (HAL_GetTick() - last_time > SAMPLE_DURATION)
 8005b36:	f7fa ff51 	bl	80009dc <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <main+0x274>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d947      	bls.n	8005bda <main+0x212>
		  {
			  last_time = HAL_GetTick();
 8005b4a:	f7fa ff47 	bl	80009dc <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <main+0x274>)
 8005b52:	601a      	str	r2, [r3, #0]
			  calibrated = true;
 8005b54:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <main+0x278>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
			  for (uint8_t i = 0; i < 2; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e038      	b.n	8005bd2 <main+0x20a>
			  {
				  idle_percent[i] = max_percent[i] - 22;
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	f107 0220 	add.w	r2, r7, #32
 8005b66:	4413      	add	r3, r2
 8005b68:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
 8005b6e:	3a16      	subs	r2, #22
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	f107 0120 	add.w	r1, r7, #32
 8005b76:	440b      	add	r3, r1
 8005b78:	f803 2c14 	strb.w	r2, [r3, #-20]
				  idle_value[i] = ((idle_percent[i] / 100.0) * 4095);
 8005b7c:	7ffb      	ldrb	r3, [r7, #31]
 8005b7e:	f107 0220 	add.w	r2, r7, #32
 8005b82:	4413      	add	r3, r2
 8005b84:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fa fc33 	bl	80003f4 <__aeabi_i2d>
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <main+0x288>)
 8005b94:	f7fa fdc2 	bl	800071c <__aeabi_ddiv>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	a323      	add	r3, pc, #140	; (adr r3, 8005c30 <main+0x268>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f7fa fc8f 	bl	80004c8 <__aeabi_dmul>
 8005baa:	4603      	mov	r3, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	7ffc      	ldrb	r4, [r7, #31]
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f7fa fe98 	bl	80008ec <__aeabi_d2uiz>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	0063      	lsls	r3, r4, #1
 8005bc2:	f107 0120 	add.w	r1, r7, #32
 8005bc6:	440b      	add	r3, r1
 8005bc8:	f823 2c18 	strh.w	r2, [r3, #-24]
			  for (uint8_t i = 0; i < 2; i++)
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d9c3      	bls.n	8005b60 <main+0x198>
 8005bd8:	e711      	b.n	80059fe <main+0x36>
			  }
		  }
		  else
		  {
			  //this should be where the while loop ends up before calibrated
			  for (uint8_t i = 0; i < 2; i++)
 8005bda:	2300      	movs	r3, #0
 8005bdc:	77bb      	strb	r3, [r7, #30]
 8005bde:	e022      	b.n	8005c26 <main+0x25e>
			  {
				  uint8_t current_percent = adc_to_percent(adcBuffer[i]);
 8005be0:	7fbb      	ldrb	r3, [r7, #30]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	f107 0220 	add.w	r2, r7, #32
 8005be8:	4413      	add	r3, r2
 8005bea:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff feb5 	bl	8005960 <adc_to_percent>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	777b      	strb	r3, [r7, #29]
				  if ((max_percent[i] < current_percent) && (current_percent <= 100))
 8005bfa:	7fbb      	ldrb	r3, [r7, #30]
 8005bfc:	f107 0220 	add.w	r2, r7, #32
 8005c00:	4413      	add	r3, r2
 8005c02:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005c06:	7f7a      	ldrb	r2, [r7, #29]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d909      	bls.n	8005c20 <main+0x258>
 8005c0c:	7f7b      	ldrb	r3, [r7, #29]
 8005c0e:	2b64      	cmp	r3, #100	; 0x64
 8005c10:	d806      	bhi.n	8005c20 <main+0x258>
				  {
					  max_percent[i] = current_percent;
 8005c12:	7fbb      	ldrb	r3, [r7, #30]
 8005c14:	f107 0220 	add.w	r2, r7, #32
 8005c18:	4413      	add	r3, r2
 8005c1a:	7f7a      	ldrb	r2, [r7, #29]
 8005c1c:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for (uint8_t i = 0; i < 2; i++)
 8005c20:	7fbb      	ldrb	r3, [r7, #30]
 8005c22:	3301      	adds	r3, #1
 8005c24:	77bb      	strb	r3, [r7, #30]
 8005c26:	7fbb      	ldrb	r3, [r7, #30]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d9d9      	bls.n	8005be0 <main+0x218>
	  if (calibrated)
 8005c2c:	e6e7      	b.n	80059fe <main+0x36>
 8005c2e:	bf00      	nop
 8005c30:	00000000 	.word	0x00000000
 8005c34:	40affe00 	.word	0x40affe00
 8005c38:	200001a4 	.word	0x200001a4
 8005c3c:	20000218 	.word	0x20000218
 8005c40:	20000181 	.word	0x20000181
 8005c44:	40360000 	.word	0x40360000
 8005c48:	40280000 	.word	0x40280000
 8005c4c:	2000021c 	.word	0x2000021c
 8005c50:	40590000 	.word	0x40590000

08005c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b094      	sub	sp, #80	; 0x50
 8005c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c5e:	2228      	movs	r2, #40	; 0x28
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fe4e 	bl	8006904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c68:	f107 0314 	add.w	r3, r7, #20
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	60da      	str	r2, [r3, #12]
 8005c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	609a      	str	r2, [r3, #8]
 8005c82:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c92:	2301      	movs	r3, #1
 8005c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c96:	2302      	movs	r3, #2
 8005c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005ca0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fc fd98 	bl	80027e0 <HAL_RCC_OscConfig>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005cb6:	f000 f8ef 	bl	8005e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cba:	230f      	movs	r3, #15
 8005cbc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fd f802 	bl	8002ce0 <HAL_RCC_ClockConfig>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005ce2:	f000 f8d9 	bl	8005e98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8005ce6:	2312      	movs	r3, #18
 8005ce8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fd f95c 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005d02:	f000 f8c9 	bl	8005e98 <Error_Handler>
  }
}
 8005d06:	bf00      	nop
 8005d08:	3750      	adds	r7, #80	; 0x50
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005d20:	4b20      	ldr	r3, [pc, #128]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d22:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <MX_ADC1_Init+0x98>)
 8005d24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d34:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d3c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005d40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d42:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d4e:	4815      	ldr	r0, [pc, #84]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d50:	f7fa fe4e 	bl	80009f0 <HAL_ADC_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8005d5a:	f000 f89d 	bl	8005e98 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005d5e:	2308      	movs	r3, #8
 8005d60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d62:	2301      	movs	r3, #1
 8005d64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005d66:	2307      	movs	r3, #7
 8005d68:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d6a:	1d3b      	adds	r3, r7, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	480d      	ldr	r0, [pc, #52]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d70:	f7fb f810 	bl	8000d94 <HAL_ADC_ConfigChannel>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8005d7a:	f000 f88d 	bl	8005e98 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005d7e:	2309      	movs	r3, #9
 8005d80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005d82:	2302      	movs	r3, #2
 8005d84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4806      	ldr	r0, [pc, #24]	; (8005da4 <MX_ADC1_Init+0x94>)
 8005d8c:	f7fb f802 	bl	8000d94 <HAL_ADC_ConfigChannel>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8005d96:	f000 f87f 	bl	8005e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200001a4 	.word	0x200001a4
 8005da8:	40012400 	.word	0x40012400

08005dac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <MX_DMA_Init+0x38>)
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	4a0b      	ldr	r2, [pc, #44]	; (8005de4 <MX_DMA_Init+0x38>)
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	6153      	str	r3, [r2, #20]
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <MX_DMA_Init+0x38>)
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	200b      	movs	r0, #11
 8005dd0:	f7fb faa1 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005dd4:	200b      	movs	r0, #11
 8005dd6:	f7fb faba 	bl	800134e <HAL_NVIC_EnableIRQ>

}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40021000 	.word	0x40021000

08005de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dee:	f107 0310 	add.w	r3, r7, #16
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	605a      	str	r2, [r3, #4]
 8005df8:	609a      	str	r2, [r3, #8]
 8005dfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dfc:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	4a23      	ldr	r2, [pc, #140]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e02:	f043 0310 	orr.w	r3, r3, #16
 8005e06:	6193      	str	r3, [r2, #24]
 8005e08:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e14:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e1a:	f043 0320 	orr.w	r3, r3, #32
 8005e1e:	6193      	str	r3, [r2, #24]
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e2c:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e32:	f043 0308 	orr.w	r3, r3, #8
 8005e36:	6193      	str	r3, [r2, #24]
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e44:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	6193      	str	r3, [r2, #24]
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <MX_GPIO_Init+0xa8>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e62:	480c      	ldr	r0, [pc, #48]	; (8005e94 <MX_GPIO_Init+0xac>)
 8005e64:	f7fb fdd6 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e76:	2302      	movs	r3, #2
 8005e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e7a:	f107 0310 	add.w	r3, r7, #16
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4804      	ldr	r0, [pc, #16]	; (8005e94 <MX_GPIO_Init+0xac>)
 8005e82:	f7fb fc6d 	bl	8001760 <HAL_GPIO_Init>

}
 8005e86:	bf00      	nop
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40011000 	.word	0x40011000

08005e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005e9c:	bf00      	nop
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <HAL_MspInit+0x5c>)
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	4a14      	ldr	r2, [pc, #80]	; (8005f00 <HAL_MspInit+0x5c>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	6193      	str	r3, [r2, #24]
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <HAL_MspInit+0x5c>)
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <HAL_MspInit+0x5c>)
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	4a0e      	ldr	r2, [pc, #56]	; (8005f00 <HAL_MspInit+0x5c>)
 8005ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	61d3      	str	r3, [r2, #28]
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <HAL_MspInit+0x5c>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	607b      	str	r3, [r7, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_MspInit+0x60>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <HAL_MspInit+0x60>)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40010000 	.word	0x40010000

08005f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 0310 	add.w	r3, r7, #16
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a28      	ldr	r2, [pc, #160]	; (8005fc4 <HAL_ADC_MspInit+0xbc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d149      	bne.n	8005fbc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f28:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <HAL_ADC_MspInit+0xc0>)
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	4a26      	ldr	r2, [pc, #152]	; (8005fc8 <HAL_ADC_MspInit+0xc0>)
 8005f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f32:	6193      	str	r3, [r2, #24]
 8005f34:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <HAL_ADC_MspInit+0xc0>)
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f40:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <HAL_ADC_MspInit+0xc0>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	4a20      	ldr	r2, [pc, #128]	; (8005fc8 <HAL_ADC_MspInit+0xc0>)
 8005f46:	f043 0308 	orr.w	r3, r3, #8
 8005f4a:	6193      	str	r3, [r2, #24]
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <HAL_ADC_MspInit+0xc0>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f60:	f107 0310 	add.w	r3, r7, #16
 8005f64:	4619      	mov	r1, r3
 8005f66:	4819      	ldr	r0, [pc, #100]	; (8005fcc <HAL_ADC_MspInit+0xc4>)
 8005f68:	f7fb fbfa 	bl	8001760 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005f6c:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f6e:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_ADC_MspInit+0xcc>)
 8005f70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f7e:	4b14      	ldr	r3, [pc, #80]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f96:	2220      	movs	r2, #32
 8005f98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005fa0:	480b      	ldr	r0, [pc, #44]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005fa2:	f7fb f9ef 	bl	8001384 <HAL_DMA_Init>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8005fac:	f7ff ff74 	bl	8005e98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a07      	ldr	r2, [pc, #28]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005fb4:	621a      	str	r2, [r3, #32]
 8005fb6:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <HAL_ADC_MspInit+0xc8>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005fbc:	bf00      	nop
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40012400 	.word	0x40012400
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	40010c00 	.word	0x40010c00
 8005fd0:	200001d4 	.word	0x200001d4
 8005fd4:	40020008 	.word	0x40020008

08005fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005fdc:	bf00      	nop
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fe8:	e7fe      	b.n	8005fe8 <HardFault_Handler+0x4>

08005fea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fea:	b480      	push	{r7}
 8005fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fee:	e7fe      	b.n	8005fee <MemManage_Handler+0x4>

08005ff0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ff4:	e7fe      	b.n	8005ff4 <BusFault_Handler+0x4>

08005ff6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ffa:	e7fe      	b.n	8005ffa <UsageFault_Handler+0x4>

08005ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006000:	bf00      	nop
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006018:	bf00      	nop
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006024:	f7fa fcc8 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006028:	bf00      	nop
 800602a:	bd80      	pop	{r7, pc}

0800602c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006030:	4802      	ldr	r0, [pc, #8]	; (800603c <DMA1_Channel1_IRQHandler+0x10>)
 8006032:	f7fb fa61 	bl	80014f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006036:	bf00      	nop
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200001d4 	.word	0x200001d4

08006040 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006044:	4802      	ldr	r0, [pc, #8]	; (8006050 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006046:	f7fb fe04 	bl	8001c52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800604a:	bf00      	nop
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200004e0 	.word	0x200004e0

08006054 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006058:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <SystemInit+0x5c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a14      	ldr	r2, [pc, #80]	; (80060b0 <SystemInit+0x5c>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006064:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <SystemInit+0x5c>)
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	4911      	ldr	r1, [pc, #68]	; (80060b0 <SystemInit+0x5c>)
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <SystemInit+0x60>)
 800606c:	4013      	ands	r3, r2
 800606e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006070:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <SystemInit+0x5c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a0e      	ldr	r2, [pc, #56]	; (80060b0 <SystemInit+0x5c>)
 8006076:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800607a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <SystemInit+0x5c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <SystemInit+0x5c>)
 8006086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800608a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <SystemInit+0x5c>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <SystemInit+0x5c>)
 8006092:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006096:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <SystemInit+0x5c>)
 800609a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800609e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <SystemInit+0x64>)
 80060a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr
 80060b0:	40021000 	.word	0x40021000
 80060b4:	f8ff0000 	.word	0xf8ff0000
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80060c0:	2200      	movs	r2, #0
 80060c2:	4912      	ldr	r1, [pc, #72]	; (800610c <MX_USB_DEVICE_Init+0x50>)
 80060c4:	4812      	ldr	r0, [pc, #72]	; (8006110 <MX_USB_DEVICE_Init+0x54>)
 80060c6:	f7fe fbbf 	bl	8004848 <USBD_Init>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060d0:	f7ff fee2 	bl	8005e98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80060d4:	490f      	ldr	r1, [pc, #60]	; (8006114 <MX_USB_DEVICE_Init+0x58>)
 80060d6:	480e      	ldr	r0, [pc, #56]	; (8006110 <MX_USB_DEVICE_Init+0x54>)
 80060d8:	f7fe fbe1 	bl	800489e <USBD_RegisterClass>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80060e2:	f7ff fed9 	bl	8005e98 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80060e6:	490c      	ldr	r1, [pc, #48]	; (8006118 <MX_USB_DEVICE_Init+0x5c>)
 80060e8:	4809      	ldr	r0, [pc, #36]	; (8006110 <MX_USB_DEVICE_Init+0x54>)
 80060ea:	f7fe fb97 	bl	800481c <USBD_CUSTOM_HID_RegisterInterface>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80060f4:	f7ff fed0 	bl	8005e98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060f8:	4805      	ldr	r0, [pc, #20]	; (8006110 <MX_USB_DEVICE_Init+0x54>)
 80060fa:	f7fe fbe9 	bl	80048d0 <USBD_Start>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006104:	f7ff fec8 	bl	8005e98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006108:	bf00      	nop
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000114 	.word	0x20000114
 8006110:	2000021c 	.word	0x2000021c
 8006114:	20000008 	.word	0x20000008
 8006118:	20000104 	.word	0x20000104

0800611c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a0d      	ldr	r2, [pc, #52]	; (8006160 <HAL_PCD_MspInit+0x44>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d113      	bne.n	8006156 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <HAL_PCD_MspInit+0x48>)
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <HAL_PCD_MspInit+0x48>)
 8006134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006138:	61d3      	str	r3, [r2, #28]
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <HAL_PCD_MspInit+0x48>)
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	2014      	movs	r0, #20
 800614c:	f7fb f8e3 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006150:	2014      	movs	r0, #20
 8006152:	f7fb f8fc 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40005c00 	.word	0x40005c00
 8006164:	40021000 	.word	0x40021000

08006168 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f7fe fbee 	bl	8004960 <USBD_LL_SetupStage>
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	015b      	lsls	r3, r3, #5
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	4619      	mov	r1, r3
 80061b0:	f7fe fc21 	bl	80049f6 <USBD_LL_DataOutStage>
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	015b      	lsls	r3, r3, #5
 80061d4:	4413      	add	r3, r2
 80061d6:	333c      	adds	r3, #60	; 0x3c
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	4619      	mov	r1, r3
 80061de:	f7fe fc7b 	bl	8004ad8 <USBD_LL_DataInStage>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fd8b 	bl	8004d14 <USBD_LL_SOF>
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800620e:	2301      	movs	r3, #1
 8006210:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d001      	beq.n	800621e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800621a:	f7ff fe3d 	bl	8005e98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fd3b 	bl	8004ca4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fcf4 	bl	8004c22 <USBD_LL_Reset>
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fd35 	bl	8004cc2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <HAL_PCD_SuspendCallback+0x30>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	4a03      	ldr	r2, [pc, #12]	; (8006274 <HAL_PCD_SuspendCallback+0x30>)
 8006266:	f043 0306 	orr.w	r3, r3, #6
 800626a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	e000ed00 	.word	0xe000ed00

08006278 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fd2f 	bl	8004cea <USBD_LL_Resume>
}
 800628c:	bf00      	nop
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800629c:	4a23      	ldr	r2, [pc, #140]	; (800632c <USBD_LL_Init+0x98>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a21      	ldr	r2, [pc, #132]	; (800632c <USBD_LL_Init+0x98>)
 80062a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80062ac:	4b1f      	ldr	r3, [pc, #124]	; (800632c <USBD_LL_Init+0x98>)
 80062ae:	4a20      	ldr	r2, [pc, #128]	; (8006330 <USBD_LL_Init+0x9c>)
 80062b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80062b2:	4b1e      	ldr	r3, [pc, #120]	; (800632c <USBD_LL_Init+0x98>)
 80062b4:	2208      	movs	r2, #8
 80062b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80062b8:	4b1c      	ldr	r3, [pc, #112]	; (800632c <USBD_LL_Init+0x98>)
 80062ba:	2202      	movs	r2, #2
 80062bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <USBD_LL_Init+0x98>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80062c4:	4b19      	ldr	r3, [pc, #100]	; (800632c <USBD_LL_Init+0x98>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80062ca:	4b18      	ldr	r3, [pc, #96]	; (800632c <USBD_LL_Init+0x98>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80062d0:	4816      	ldr	r0, [pc, #88]	; (800632c <USBD_LL_Init+0x98>)
 80062d2:	f7fb fbb7 	bl	8001a44 <HAL_PCD_Init>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80062dc:	f7ff fddc 	bl	8005e98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062e6:	2318      	movs	r3, #24
 80062e8:	2200      	movs	r2, #0
 80062ea:	2100      	movs	r1, #0
 80062ec:	f7fc fa3c 	bl	8002768 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062f6:	2358      	movs	r3, #88	; 0x58
 80062f8:	2200      	movs	r2, #0
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	f7fc fa34 	bl	8002768 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006306:	2398      	movs	r3, #152	; 0x98
 8006308:	2200      	movs	r2, #0
 800630a:	2181      	movs	r1, #129	; 0x81
 800630c:	f7fc fa2c 	bl	8002768 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006316:	23d8      	movs	r3, #216	; 0xd8
 8006318:	2200      	movs	r2, #0
 800631a:	2101      	movs	r1, #1
 800631c:	f7fc fa24 	bl	8002768 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200004e0 	.word	0x200004e0
 8006330:	40005c00 	.word	0x40005c00

08006334 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800634a:	4618      	mov	r0, r3
 800634c:	f7fb fc5b 	bl	8001c06 <HAL_PCD_Start>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 f934 	bl	80065c4 <USBD_Get_USB_Status>
 800635c:	4603      	mov	r3, r0
 800635e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006360:	7bbb      	ldrb	r3, [r7, #14]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	461a      	mov	r2, r3
 8006378:	4603      	mov	r3, r0
 800637a:	70fb      	strb	r3, [r7, #3]
 800637c:	460b      	mov	r3, r1
 800637e:	70bb      	strb	r3, [r7, #2]
 8006380:	4613      	mov	r3, r2
 8006382:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006392:	78bb      	ldrb	r3, [r7, #2]
 8006394:	883a      	ldrh	r2, [r7, #0]
 8006396:	78f9      	ldrb	r1, [r7, #3]
 8006398:	f7fb fd8e 	bl	8001eb8 <HAL_PCD_EP_Open>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f90e 	bl	80065c4 <USBD_Get_USB_Status>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	4611      	mov	r1, r2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fb fdcf 	bl	8001f78 <HAL_PCD_EP_Close>
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 f8ef 	bl	80065c4 <USBD_Get_USB_Status>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800640e:	78fa      	ldrb	r2, [r7, #3]
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f7fb fe65 	bl	80020e2 <HAL_PCD_EP_SetStall>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f8d0 	bl	80065c4 <USBD_Get_USB_Status>
 8006424:	4603      	mov	r3, r0
 8006426:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006428:	7bbb      	ldrb	r3, [r7, #14]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800644c:	78fa      	ldrb	r2, [r7, #3]
 800644e:	4611      	mov	r1, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f7fb fea0 	bl	8002196 <HAL_PCD_EP_ClrStall>
 8006456:	4603      	mov	r3, r0
 8006458:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 f8b1 	bl	80065c4 <USBD_Get_USB_Status>
 8006462:	4603      	mov	r3, r0
 8006464:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006466:	7bbb      	ldrb	r3, [r7, #14]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006482:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006488:	2b00      	cmp	r3, #0
 800648a:	da08      	bge.n	800649e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	015b      	lsls	r3, r3, #5
 8006496:	4413      	add	r3, r2
 8006498:	332a      	adds	r3, #42	; 0x2a
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	e008      	b.n	80064b0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	015b      	lsls	r3, r3, #5
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80064ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fb fcc8 	bl	8001e6e <HAL_PCD_SetAddress>
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f86d 	bl	80065c4 <USBD_Get_USB_Status>
 80064ea:	4603      	mov	r3, r0
 80064ec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	461a      	mov	r2, r3
 8006504:	460b      	mov	r3, r1
 8006506:	72fb      	strb	r3, [r7, #11]
 8006508:	4613      	mov	r3, r2
 800650a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800651a:	893b      	ldrh	r3, [r7, #8]
 800651c:	7af9      	ldrb	r1, [r7, #11]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	f7fb fda6 	bl	8002070 <HAL_PCD_EP_Transmit>
 8006524:	4603      	mov	r3, r0
 8006526:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f84a 	bl	80065c4 <USBD_Get_USB_Status>
 8006530:	4603      	mov	r3, r0
 8006532:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006534:	7dbb      	ldrb	r3, [r7, #22]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	461a      	mov	r2, r3
 800654a:	460b      	mov	r3, r1
 800654c:	72fb      	strb	r3, [r7, #11]
 800654e:	4613      	mov	r3, r2
 8006550:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006560:	893b      	ldrh	r3, [r7, #8]
 8006562:	7af9      	ldrb	r1, [r7, #11]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	f7fb fd49 	bl	8001ffc <HAL_PCD_EP_Receive>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	4618      	mov	r0, r3
 8006572:	f000 f827 	bl	80065c4 <USBD_Get_USB_Status>
 8006576:	4603      	mov	r3, r0
 8006578:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800657a:	7dbb      	ldrb	r3, [r7, #22]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800658c:	4b02      	ldr	r3, [pc, #8]	; (8006598 <USBD_static_malloc+0x14>)
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr
 8006598:	20000184 	.word	0x20000184

0800659c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d817      	bhi.n	8006608 <USBD_Get_USB_Status+0x44>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <USBD_Get_USB_Status+0x1c>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	080065f1 	.word	0x080065f1
 80065e4:	080065f7 	.word	0x080065f7
 80065e8:	080065fd 	.word	0x080065fd
 80065ec:	08006603 	.word	0x08006603
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
    break;
 80065f4:	e00b      	b.n	800660e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065f6:	2302      	movs	r3, #2
 80065f8:	73fb      	strb	r3, [r7, #15]
    break;
 80065fa:	e008      	b.n	800660e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065fc:	2301      	movs	r3, #1
 80065fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006600:	e005      	b.n	800660e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006602:	2302      	movs	r3, #2
 8006604:	73fb      	strb	r3, [r7, #15]
    break;
 8006606:	e002      	b.n	800660e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006608:	2302      	movs	r3, #2
 800660a:	73fb      	strb	r3, [r7, #15]
    break;
 800660c:	bf00      	nop
  }
  return usb_status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006620:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006622:	4618      	mov	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800662a:	b480      	push	{r7}
 800662c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800662e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006630:	4618      	mov	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	460a      	mov	r2, r1
 8006642:	71fb      	strb	r3, [r7, #7]
 8006644:	4613      	mov	r3, r2
 8006646:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8006648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr

08006654 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	6039      	str	r1, [r7, #0]
 800665e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2212      	movs	r2, #18
 8006664:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006666:	4b03      	ldr	r3, [pc, #12]	; (8006674 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000130 	.word	0x20000130

08006678 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2204      	movs	r2, #4
 8006688:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800668a:	4b03      	ldr	r3, [pc, #12]	; (8006698 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20000144 	.word	0x20000144

0800669c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	4603      	mov	r3, r0
 80066a4:	6039      	str	r1, [r7, #0]
 80066a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4907      	ldr	r1, [pc, #28]	; (80066d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80066b2:	4808      	ldr	r0, [pc, #32]	; (80066d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80066b4:	f7ff f877 	bl	80057a6 <USBD_GetString>
 80066b8:	e004      	b.n	80066c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	4904      	ldr	r1, [pc, #16]	; (80066d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80066be:	4805      	ldr	r0, [pc, #20]	; (80066d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80066c0:	f7ff f871 	bl	80057a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	2000074c 	.word	0x2000074c
 80066d4:	080069cc 	.word	0x080069cc

080066d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	4904      	ldr	r1, [pc, #16]	; (80066f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80066e8:	4804      	ldr	r0, [pc, #16]	; (80066fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80066ea:	f7ff f85c 	bl	80057a6 <USBD_GetString>
  return USBD_StrDesc;
 80066ee:	4b02      	ldr	r3, [pc, #8]	; (80066f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	2000074c 	.word	0x2000074c
 80066fc:	080069e4 	.word	0x080069e4

08006700 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	221a      	movs	r2, #26
 8006710:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006712:	f000 f843 	bl	800679c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006716:	4b02      	ldr	r3, [pc, #8]	; (8006720 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20000148 	.word	0x20000148

08006724 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4907      	ldr	r1, [pc, #28]	; (8006758 <USBD_FS_ConfigStrDescriptor+0x34>)
 800673a:	4808      	ldr	r0, [pc, #32]	; (800675c <USBD_FS_ConfigStrDescriptor+0x38>)
 800673c:	f7ff f833 	bl	80057a6 <USBD_GetString>
 8006740:	e004      	b.n	800674c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	4904      	ldr	r1, [pc, #16]	; (8006758 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006746:	4805      	ldr	r0, [pc, #20]	; (800675c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006748:	f7ff f82d 	bl	80057a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800674c:	4b02      	ldr	r3, [pc, #8]	; (8006758 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	2000074c 	.word	0x2000074c
 800675c:	080069fc 	.word	0x080069fc

08006760 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	4907      	ldr	r1, [pc, #28]	; (8006794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006776:	4808      	ldr	r0, [pc, #32]	; (8006798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006778:	f7ff f815 	bl	80057a6 <USBD_GetString>
 800677c:	e004      	b.n	8006788 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	4904      	ldr	r1, [pc, #16]	; (8006794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006784:	f7ff f80f 	bl	80057a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006788:	4b02      	ldr	r3, [pc, #8]	; (8006794 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	2000074c 	.word	0x2000074c
 8006798:	08006a10 	.word	0x08006a10

0800679c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <Get_SerialNum+0x44>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067a8:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <Get_SerialNum+0x48>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067ae:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <Get_SerialNum+0x4c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067c2:	2208      	movs	r2, #8
 80067c4:	4909      	ldr	r1, [pc, #36]	; (80067ec <Get_SerialNum+0x50>)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f814 	bl	80067f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067cc:	2204      	movs	r2, #4
 80067ce:	4908      	ldr	r1, [pc, #32]	; (80067f0 <Get_SerialNum+0x54>)
 80067d0:	68b8      	ldr	r0, [r7, #8]
 80067d2:	f000 f80f 	bl	80067f4 <IntToUnicode>
  }
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	1ffff7e8 	.word	0x1ffff7e8
 80067e4:	1ffff7ec 	.word	0x1ffff7ec
 80067e8:	1ffff7f0 	.word	0x1ffff7f0
 80067ec:	2000014a 	.word	0x2000014a
 80067f0:	2000015a 	.word	0x2000015a

080067f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
 800680a:	e027      	b.n	800685c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	2b09      	cmp	r3, #9
 8006812:	d80b      	bhi.n	800682c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	0f1b      	lsrs	r3, r3, #28
 8006818:	b2da      	uxtb	r2, r3
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4619      	mov	r1, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	440b      	add	r3, r1
 8006824:	3230      	adds	r2, #48	; 0x30
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e00a      	b.n	8006842 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0f1b      	lsrs	r3, r3, #28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4619      	mov	r1, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	440b      	add	r3, r1
 800683c:	3237      	adds	r2, #55	; 0x37
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	3301      	adds	r3, #1
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4413      	add	r3, r2
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	3301      	adds	r3, #1
 800685a:	75fb      	strb	r3, [r7, #23]
 800685c:	7dfa      	ldrb	r2, [r7, #23]
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	429a      	cmp	r2, r3
 8006862:	d3d3      	bcc.n	800680c <IntToUnicode+0x18>
  }
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr
	...

08006870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006870:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006872:	e003      	b.n	800687c <LoopCopyDataInit>

08006874 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006876:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006878:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800687a:	3104      	adds	r1, #4

0800687c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800687c:	480a      	ldr	r0, [pc, #40]	; (80068a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006880:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006882:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006884:	d3f6      	bcc.n	8006874 <CopyDataInit>
  ldr r2, =_sbss
 8006886:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006888:	e002      	b.n	8006890 <LoopFillZerobss>

0800688a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800688a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800688c:	f842 3b04 	str.w	r3, [r2], #4

08006890 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006890:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006892:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006894:	d3f9      	bcc.n	800688a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006896:	f7ff fbdd 	bl	8006054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800689a:	f000 f80f 	bl	80068bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800689e:	f7ff f893 	bl	80059c8 <main>
  bx lr
 80068a2:	4770      	bx	lr
  ldr r3, =_sidata
 80068a4:	08006a40 	.word	0x08006a40
  ldr r0, =_sdata
 80068a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80068ac:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 80068b0:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 80068b4:	2000094c 	.word	0x2000094c

080068b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80068b8:	e7fe      	b.n	80068b8 <ADC1_2_IRQHandler>
	...

080068bc <__libc_init_array>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	2500      	movs	r5, #0
 80068c0:	4e0c      	ldr	r6, [pc, #48]	; (80068f4 <__libc_init_array+0x38>)
 80068c2:	4c0d      	ldr	r4, [pc, #52]	; (80068f8 <__libc_init_array+0x3c>)
 80068c4:	1ba4      	subs	r4, r4, r6
 80068c6:	10a4      	asrs	r4, r4, #2
 80068c8:	42a5      	cmp	r5, r4
 80068ca:	d109      	bne.n	80068e0 <__libc_init_array+0x24>
 80068cc:	f000 f868 	bl	80069a0 <_init>
 80068d0:	2500      	movs	r5, #0
 80068d2:	4e0a      	ldr	r6, [pc, #40]	; (80068fc <__libc_init_array+0x40>)
 80068d4:	4c0a      	ldr	r4, [pc, #40]	; (8006900 <__libc_init_array+0x44>)
 80068d6:	1ba4      	subs	r4, r4, r6
 80068d8:	10a4      	asrs	r4, r4, #2
 80068da:	42a5      	cmp	r5, r4
 80068dc:	d105      	bne.n	80068ea <__libc_init_array+0x2e>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068e4:	4798      	blx	r3
 80068e6:	3501      	adds	r5, #1
 80068e8:	e7ee      	b.n	80068c8 <__libc_init_array+0xc>
 80068ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ee:	4798      	blx	r3
 80068f0:	3501      	adds	r5, #1
 80068f2:	e7f2      	b.n	80068da <__libc_init_array+0x1e>
 80068f4:	08006a38 	.word	0x08006a38
 80068f8:	08006a38 	.word	0x08006a38
 80068fc:	08006a38 	.word	0x08006a38
 8006900:	08006a3c 	.word	0x08006a3c

08006904 <memset>:
 8006904:	4603      	mov	r3, r0
 8006906:	4402      	add	r2, r0
 8006908:	4293      	cmp	r3, r2
 800690a:	d100      	bne.n	800690e <memset+0xa>
 800690c:	4770      	bx	lr
 800690e:	f803 1b01 	strb.w	r1, [r3], #1
 8006912:	e7f9      	b.n	8006908 <memset+0x4>

08006914 <round>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800691a:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800691e:	2c13      	cmp	r4, #19
 8006920:	4606      	mov	r6, r0
 8006922:	460d      	mov	r5, r1
 8006924:	460b      	mov	r3, r1
 8006926:	468c      	mov	ip, r1
 8006928:	4602      	mov	r2, r0
 800692a:	dc17      	bgt.n	800695c <round+0x48>
 800692c:	2c00      	cmp	r4, #0
 800692e:	da09      	bge.n	8006944 <round+0x30>
 8006930:	3401      	adds	r4, #1
 8006932:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006936:	d103      	bne.n	8006940 <round+0x2c>
 8006938:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800693c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006940:	2200      	movs	r2, #0
 8006942:	e028      	b.n	8006996 <round+0x82>
 8006944:	4915      	ldr	r1, [pc, #84]	; (800699c <round+0x88>)
 8006946:	4121      	asrs	r1, r4
 8006948:	420d      	tst	r5, r1
 800694a:	d100      	bne.n	800694e <round+0x3a>
 800694c:	b178      	cbz	r0, 800696e <round+0x5a>
 800694e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006952:	4123      	asrs	r3, r4
 8006954:	4463      	add	r3, ip
 8006956:	ea23 0301 	bic.w	r3, r3, r1
 800695a:	e7f1      	b.n	8006940 <round+0x2c>
 800695c:	2c33      	cmp	r4, #51	; 0x33
 800695e:	dd09      	ble.n	8006974 <round+0x60>
 8006960:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006964:	d103      	bne.n	800696e <round+0x5a>
 8006966:	f7f9 fbf9 	bl	800015c <__adddf3>
 800696a:	4606      	mov	r6, r0
 800696c:	460d      	mov	r5, r1
 800696e:	4630      	mov	r0, r6
 8006970:	4629      	mov	r1, r5
 8006972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800697c:	40f8      	lsrs	r0, r7
 800697e:	4206      	tst	r6, r0
 8006980:	d0f5      	beq.n	800696e <round+0x5a>
 8006982:	2101      	movs	r1, #1
 8006984:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006988:	fa01 f404 	lsl.w	r4, r1, r4
 800698c:	1932      	adds	r2, r6, r4
 800698e:	bf28      	it	cs
 8006990:	185b      	addcs	r3, r3, r1
 8006992:	ea22 0200 	bic.w	r2, r2, r0
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	e7e6      	b.n	800696a <round+0x56>
 800699c:	000fffff 	.word	0x000fffff

080069a0 <_init>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr

080069ac <_fini>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	bf00      	nop
 80069b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b2:	bc08      	pop	{r3}
 80069b4:	469e      	mov	lr, r3
 80069b6:	4770      	bx	lr
